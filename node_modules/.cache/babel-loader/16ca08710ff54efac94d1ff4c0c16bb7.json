{"ast":null,"code":"var _jsxFileName = \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\src\\\\components\\\\MonthView\\\\DoughnutChart.js\";\nimport React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport Loader from \"../Common/Loader\";\nimport * as utils from \"../Util\";\nimport \"chartjs-plugin-labels\";\nimport { Route } from \"react-router-dom\";\n\nvar DoughnutChart = function DoughnutChart(props) {\n  var expenses = props.expenses;\n  var currentUser = props.authUser;\n  var selectedMonth = props.month;\n  var selectedYear = props.year;\n  var allCategoryTotals = null;\n  var categoryList = null;\n  var categoryColors = null;\n\n  if (!expenses || !currentUser || !selectedMonth || !selectedYear) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }));\n  }\n\n  if (expenses && currentUser && selectedMonth && selectedYear) {\n    var eachExpense = utils.eachExpense(expenses);\n    var usersExpensesInSelectedMonthAndYear = utils.expensesinMonthAndYear(eachExpense, currentUser, selectedMonth, selectedYear);\n    allCategoryTotals = utils.calculateTotalForAllCategories(usersExpensesInSelectedMonthAndYear);\n\n    var eachCategory = function eachCategory(allCategoryTotals) {\n      return Object.keys(allCategoryTotals).map(function (key) {\n        return {\n          key: key,\n          value: allCategoryTotals[key]\n        };\n      });\n    };\n\n    categoryList = eachCategory(allCategoryTotals).filter(function (el) {\n      return el.value > 0;\n    }).map(function (el) {\n      return el.key;\n    });\n    categoryColors = categoryList.map(function (el) {\n      return utils.getCatColor(el);\n    });\n    var data = {\n      labels: categoryList,\n      datasets: [{\n        data: Object.values(allCategoryTotals).filter(function (el) {\n          return el > 0;\n        }),\n        backgroundColor: categoryColors,\n        hoverBackgroundColor: categoryColors\n      }]\n    };\n    var options = {\n      legend: {\n        display: true,\n        position: \"left\",\n        fullWidth: true,\n        reverse: false\n      },\n      layout: {\n        padding: {\n          left: 15,\n          right: 85,\n          top: 5,\n          bottom: 5\n        }\n      },\n      cutoutPercentage: 70,\n      plugins: {\n        labels: {\n          // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n          render: \"percentage\",\n          // precision for percentage, default is 0\n          precision: 0,\n          // identifies whether or not labels of value 0 are displayed, default is false\n          showZero: true,\n          // font size, default is defaultFontSize\n          fontSize: 12,\n          // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n          fontColor: \"#000\",\n          // font style, default is defaultFontStyle\n          fontStyle: \"bold\",\n          // font family, default is defaultFontFamily\n          fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n          // draw text shadows under labels, default is false\n          textShadow: true,\n          // text shadow intensity, default is 6\n          shadowBlur: 10,\n          // text shadow X offset, default is 3\n          shadowOffsetX: -5,\n          // text shadow Y offset, default is 3\n          shadowOffsetY: 5,\n          // text shadow color, default is 'rgba(0,0,0,0.3)'\n          shadowColor: \"rgba(255,0,0,0.75)\",\n          // draw label in arc, default is false\n          // bar chart ignores this\n          arc: true,\n          // position to draw label, available value is 'default', 'border' and 'outside'\n          // bar chart ignores this\n          // default is 'default'\n          position: \"inside\",\n          // draw label even it's overlap, default is true\n          // bar chart ignores this\n          overlap: false,\n          // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n          showActualPercentages: true,\n          // add padding when position is `outside`\n          // default is 2\n          outsidePadding: 4,\n          // add margin of text when position is `outside` or `border`\n          // default is 2\n          textMargin: 14\n        }\n      }\n    };\n    var optionsMobile = {\n      legend: {\n        display: true,\n        position: \"bottom\",\n        fullWidth: true\n      },\n      layout: {\n        padding: {\n          left: 15,\n          right: 15,\n          top: 15,\n          bottom: 15\n        }\n      },\n      cutoutPercentage: 0,\n      plugins: {\n        labels: {\n          // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n          render: \"percentage\",\n          // precision for percentage, default is 0\n          precision: 0,\n          // identifies whether or not labels of value 0 are displayed, default is false\n          showZero: true,\n          // font size, default is defaultFontSize\n          fontSize: 12,\n          // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n          fontColor: \"#000\",\n          // font style, default is defaultFontStyle\n          fontStyle: \"normal\",\n          // font family, default is defaultFontFamily\n          fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n          // draw text shadows under labels, default is false\n          textShadow: true,\n          // text shadow intensity, default is 6\n          shadowBlur: 10,\n          // text shadow X offset, default is 3\n          shadowOffsetX: -5,\n          // text shadow Y offset, default is 3\n          shadowOffsetY: 5,\n          // text shadow color, default is 'rgba(0,0,0,0.3)'\n          shadowColor: \"rgba(255,0,0,0.75)\",\n          // draw label in arc, default is false\n          // bar chart ignores this\n          arc: true,\n          // position to draw label, available value is 'default', 'border' and 'outside'\n          // bar chart ignores this\n          // default is 'default'\n          position: \"inside\",\n          // draw label even it's overlap, default is true\n          // bar chart ignores this\n          overlap: false,\n          // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n          showActualPercentages: true,\n          // add padding when position is `outside`\n          // default is 2\n          outsidePadding: 4,\n          // add margin of text when position is `outside` or `border`\n          // default is 2\n          textMargin: 4\n        }\n      }\n    };\n    var mobPad15 = {\n      padding: window.screen.width > 720 ? \"0\" : \"15px\"\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      style: mobPad15,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"Category Analyser\"), React.createElement(Route, {\n      render: function render(_ref) {\n        var history = _ref.history;\n        return React.createElement(Doughnut, {\n          data: data,\n          options: window.screen.width > 720 ? options : optionsMobile,\n          height: window.screen.width > 720 ? 80 : 350,\n          responsive: true,\n          onElementsClick: function onElementsClick(elems) {\n            if (elems.length) {\n              var clickedLabel = elems[0]._model.label;\n              history.push(\"/filter-view?category=\".concat(clickedLabel, \"&selectedMonth=\").concat(selectedMonth, \"&selectedYear=\").concat(selectedYear, \"&from=monthpage\"));\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }));\n  }\n};\n\nexport default DoughnutChart;","map":{"version":3,"sources":["G:\\Workspace\\2018\\expense-manager-react\\src\\components\\MonthView\\DoughnutChart.js"],"names":["React","Doughnut","Loader","utils","Route","DoughnutChart","props","expenses","currentUser","authUser","selectedMonth","month","selectedYear","year","allCategoryTotals","categoryList","categoryColors","eachExpense","usersExpensesInSelectedMonthAndYear","expensesinMonthAndYear","calculateTotalForAllCategories","eachCategory","Object","keys","map","key","value","filter","el","getCatColor","data","labels","datasets","values","backgroundColor","hoverBackgroundColor","options","legend","display","position","fullWidth","reverse","layout","padding","left","right","top","bottom","cutoutPercentage","plugins","render","precision","showZero","fontSize","fontColor","fontStyle","fontFamily","textShadow","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","arc","overlap","showActualPercentages","outsidePadding","textMargin","optionsMobile","mobPad15","window","screen","width","history","elems","length","clickedLabel","_model","label","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,OAAO,uBAAP;AAEA,SAASC,KAAT,QAAsB,kBAAtB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AAC3B,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AACA,MAAIC,WAAW,GAAGF,KAAK,CAACG,QAAxB;AACA,MAAIC,aAAa,GAAGJ,KAAK,CAACK,KAA1B;AACA,MAAIC,YAAY,GAAGN,KAAK,CAACO,IAAzB;AAEA,MAAIC,iBAAiB,GAAG,IAAxB;AACA,MAAIC,YAAY,GAAG,IAAnB;AACA,MAAIC,cAAc,GAAG,IAArB;;AAEA,MAAI,CAACT,QAAD,IAAa,CAACC,WAAd,IAA6B,CAACE,aAA9B,IAA+C,CAACE,YAApD,EAAkE;AAC9D,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AAED,MAAIL,QAAQ,IAAIC,WAAZ,IAA2BE,aAA3B,IAA4CE,YAAhD,EAA8D;AAC1D,QAAIK,WAAW,GAAGd,KAAK,CAACc,WAAN,CAAkBV,QAAlB,CAAlB;AACA,QAAIW,mCAAmC,GAAGf,KAAK,CAACgB,sBAAN,CACtCF,WADsC,EAEtCT,WAFsC,EAGtCE,aAHsC,EAItCE,YAJsC,CAA1C;AAOAE,IAAAA,iBAAiB,GAAGX,KAAK,CAACiB,8BAAN,CAAqCF,mCAArC,CAApB;;AAEA,QAAMG,YAAY,GAAG,SAAfA,YAAe,CAAAP,iBAAiB,EAAI;AACtC,aAAOQ,MAAM,CAACC,IAAP,CAAYT,iBAAZ,EAA+BU,GAA/B,CAAmC,UAASC,GAAT,EAAc;AACpD,eAAO;AAAEA,UAAAA,GAAG,EAAEA,GAAP;AAAYC,UAAAA,KAAK,EAAEZ,iBAAiB,CAACW,GAAD;AAApC,SAAP;AACH,OAFM,CAAP;AAGH,KAJD;;AAMAV,IAAAA,YAAY,GAAGM,YAAY,CAACP,iBAAD,CAAZ,CACVa,MADU,CACH,UAAAC,EAAE,EAAI;AACV,aAAOA,EAAE,CAACF,KAAH,GAAW,CAAlB;AACH,KAHU,EAIVF,GAJU,CAIN,UAAAI,EAAE;AAAA,aAAIA,EAAE,CAACH,GAAP;AAAA,KAJI,CAAf;AAMAT,IAAAA,cAAc,GAAGD,YAAY,CAACS,GAAb,CAAiB,UAAAI,EAAE;AAAA,aAAIzB,KAAK,CAAC0B,WAAN,CAAkBD,EAAlB,CAAJ;AAAA,KAAnB,CAAjB;AAEA,QAAIE,IAAI,GAAG;AACPC,MAAAA,MAAM,EAAEhB,YADD;AAEPiB,MAAAA,QAAQ,EAAE,CACN;AACIF,QAAAA,IAAI,EAAER,MAAM,CAACW,MAAP,CAAcnB,iBAAd,EAAiCa,MAAjC,CAAwC,UAAAC,EAAE;AAAA,iBAAIA,EAAE,GAAG,CAAT;AAAA,SAA1C,CADV;AAEIM,QAAAA,eAAe,EAAElB,cAFrB;AAGImB,QAAAA,oBAAoB,EAAEnB;AAH1B,OADM;AAFH,KAAX;AAWA,QAAMoB,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,QAAQ,EAAE,MAA3B;AAAmCC,QAAAA,SAAS,EAAE,IAA9C;AAAoDC,QAAAA,OAAO,EAAE;AAA7D,OADI;AAEZC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,IAAI,EAAE,EAAR;AAAYC,UAAAA,KAAK,EAAE,EAAnB;AAAuBC,UAAAA,GAAG,EAAE,CAA5B;AAA+BC,UAAAA,MAAM,EAAE;AAAvC;AAAX,OAFI;AAGZC,MAAAA,gBAAgB,EAAE,EAHN;AAIZC,MAAAA,OAAO,EAAE;AACLlB,QAAAA,MAAM,EAAE;AACJ;AACAmB,UAAAA,MAAM,EAAE,YAFJ;AAIJ;AACAC,UAAAA,SAAS,EAAE,CALP;AAOJ;AACAC,UAAAA,QAAQ,EAAE,IARN;AAUJ;AACAC,UAAAA,QAAQ,EAAE,EAXN;AAaJ;AACAC,UAAAA,SAAS,EAAE,MAdP;AAgBJ;AACAC,UAAAA,SAAS,EAAE,MAjBP;AAmBJ;AACAC,UAAAA,UAAU,EAAE,oDApBR;AAsBJ;AACAC,UAAAA,UAAU,EAAE,IAvBR;AAyBJ;AACAC,UAAAA,UAAU,EAAE,EA1BR;AA4BJ;AACAC,UAAAA,aAAa,EAAE,CAAC,CA7BZ;AA+BJ;AACAC,UAAAA,aAAa,EAAE,CAhCX;AAkCJ;AACAC,UAAAA,WAAW,EAAE,oBAnCT;AAqCJ;AACA;AACAC,UAAAA,GAAG,EAAE,IAvCD;AAyCJ;AACA;AACA;AACAvB,UAAAA,QAAQ,EAAE,QA5CN;AA8CJ;AACA;AACAwB,UAAAA,OAAO,EAAE,KAhDL;AAkDJ;AACAC,UAAAA,qBAAqB,EAAE,IAnDnB;AAqDJ;AACA;AACAC,UAAAA,cAAc,EAAE,CAvDZ;AAyDJ;AACA;AACAC,UAAAA,UAAU,EAAE;AA3DR;AADH;AAJG,KAAhB;AAqEA,QAAMC,aAAa,GAAG;AAClB9B,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,QAAQ,EAAE,QAA3B;AAAqCC,QAAAA,SAAS,EAAE;AAAhD,OADU;AAElBE,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,IAAI,EAAE,EAAR;AAAYC,UAAAA,KAAK,EAAE,EAAnB;AAAuBC,UAAAA,GAAG,EAAE,EAA5B;AAAgCC,UAAAA,MAAM,EAAE;AAAxC;AAAX,OAFU;AAGlBC,MAAAA,gBAAgB,EAAE,CAHA;AAIlBC,MAAAA,OAAO,EAAE;AACLlB,QAAAA,MAAM,EAAE;AACJ;AACAmB,UAAAA,MAAM,EAAE,YAFJ;AAIJ;AACAC,UAAAA,SAAS,EAAE,CALP;AAOJ;AACAC,UAAAA,QAAQ,EAAE,IARN;AAUJ;AACAC,UAAAA,QAAQ,EAAE,EAXN;AAaJ;AACAC,UAAAA,SAAS,EAAE,MAdP;AAgBJ;AACAC,UAAAA,SAAS,EAAE,QAjBP;AAmBJ;AACAC,UAAAA,UAAU,EAAE,oDApBR;AAsBJ;AACAC,UAAAA,UAAU,EAAE,IAvBR;AAyBJ;AACAC,UAAAA,UAAU,EAAE,EA1BR;AA4BJ;AACAC,UAAAA,aAAa,EAAE,CAAC,CA7BZ;AA+BJ;AACAC,UAAAA,aAAa,EAAE,CAhCX;AAkCJ;AACAC,UAAAA,WAAW,EAAE,oBAnCT;AAqCJ;AACA;AACAC,UAAAA,GAAG,EAAE,IAvCD;AAyCJ;AACA;AACA;AACAvB,UAAAA,QAAQ,EAAE,QA5CN;AA8CJ;AACA;AACAwB,UAAAA,OAAO,EAAE,KAhDL;AAkDJ;AACAC,UAAAA,qBAAqB,EAAE,IAnDnB;AAqDJ;AACA;AACAC,UAAAA,cAAc,EAAE,CAvDZ;AAyDJ;AACA;AACAC,UAAAA,UAAU,EAAE;AA3DR;AADH;AAJS,KAAtB;AAoEA,QAAME,QAAQ,GAAG;AAAEzB,MAAAA,OAAO,EAAE0B,MAAM,CAACC,MAAP,CAAcC,KAAd,GAAsB,GAAtB,GAA4B,GAA5B,GAAkC;AAA7C,KAAjB;AAEA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAI,MAAA,KAAK,EAAEH,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFJ,EAGI,oBAAC,KAAD;AACI,MAAA,MAAM,EAAE;AAAA,YAAGI,OAAH,QAAGA,OAAH;AAAA,eACJ,oBAAC,QAAD;AACI,UAAA,IAAI,EAAE1C,IADV;AAEI,UAAA,OAAO,EAAEuC,MAAM,CAACC,MAAP,CAAcC,KAAd,GAAsB,GAAtB,GAA4BnC,OAA5B,GAAsC+B,aAFnD;AAGI,UAAA,MAAM,EAAEE,MAAM,CAACC,MAAP,CAAcC,KAAd,GAAsB,GAAtB,GAA4B,EAA5B,GAAiC,GAH7C;AAII,UAAA,UAAU,EAAE,IAJhB;AAKI,UAAA,eAAe,EAAE,yBAAAE,KAAK,EAAI;AACtB,gBAAIA,KAAK,CAACC,MAAV,EAAkB;AACd,kBAAMC,YAAY,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASG,MAAT,CAAgBC,KAArC;AACAL,cAAAA,OAAO,CAACM,IAAR,iCAC6BH,YAD7B,4BAC2DjE,aAD3D,2BACyFE,YADzF;AAGH;AACJ,WAZL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADI;AAAA,OADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ;AAwBH;AACJ,CA1ND;;AA4NA,eAAeP,aAAf","sourcesContent":["import React from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport Loader from \"../Common/Loader\";\r\nimport * as utils from \"../Util\";\r\nimport \"chartjs-plugin-labels\";\r\n\r\nimport { Route } from \"react-router-dom\";\r\n\r\nconst DoughnutChart = props => {\r\n    let expenses = props.expenses;\r\n    let currentUser = props.authUser;\r\n    let selectedMonth = props.month;\r\n    let selectedYear = props.year;\r\n\r\n    let allCategoryTotals = null;\r\n    let categoryList = null;\r\n    let categoryColors = null;\r\n\r\n    if (!expenses || !currentUser || !selectedMonth || !selectedYear) {\r\n        return (\r\n            <div>\r\n                <Loader />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (expenses && currentUser && selectedMonth && selectedYear) {\r\n        let eachExpense = utils.eachExpense(expenses);\r\n        let usersExpensesInSelectedMonthAndYear = utils.expensesinMonthAndYear(\r\n            eachExpense,\r\n            currentUser,\r\n            selectedMonth,\r\n            selectedYear\r\n        );\r\n\r\n        allCategoryTotals = utils.calculateTotalForAllCategories(usersExpensesInSelectedMonthAndYear);\r\n\r\n        const eachCategory = allCategoryTotals => {\r\n            return Object.keys(allCategoryTotals).map(function(key) {\r\n                return { key: key, value: allCategoryTotals[key] };\r\n            });\r\n        };\r\n\r\n        categoryList = eachCategory(allCategoryTotals)\r\n            .filter(el => {\r\n                return el.value > 0;\r\n            })\r\n            .map(el => el.key);\r\n\r\n        categoryColors = categoryList.map(el => utils.getCatColor(el));\r\n\r\n        let data = {\r\n            labels: categoryList,\r\n            datasets: [\r\n                {\r\n                    data: Object.values(allCategoryTotals).filter(el => el > 0),\r\n                    backgroundColor: categoryColors,\r\n                    hoverBackgroundColor: categoryColors\r\n                }\r\n            ]\r\n        };\r\n\r\n        const options = {\r\n            legend: { display: true, position: \"left\", fullWidth: true, reverse: false },\r\n            layout: { padding: { left: 15, right: 85, top: 5, bottom: 5 } },\r\n            cutoutPercentage: 70,\r\n            plugins: {\r\n                labels: {\r\n                    // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\r\n                    render: \"percentage\",\r\n\r\n                    // precision for percentage, default is 0\r\n                    precision: 0,\r\n\r\n                    // identifies whether or not labels of value 0 are displayed, default is false\r\n                    showZero: true,\r\n\r\n                    // font size, default is defaultFontSize\r\n                    fontSize: 12,\r\n\r\n                    // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\r\n                    fontColor: \"#000\",\r\n\r\n                    // font style, default is defaultFontStyle\r\n                    fontStyle: \"bold\",\r\n\r\n                    // font family, default is defaultFontFamily\r\n                    fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n\r\n                    // draw text shadows under labels, default is false\r\n                    textShadow: true,\r\n\r\n                    // text shadow intensity, default is 6\r\n                    shadowBlur: 10,\r\n\r\n                    // text shadow X offset, default is 3\r\n                    shadowOffsetX: -5,\r\n\r\n                    // text shadow Y offset, default is 3\r\n                    shadowOffsetY: 5,\r\n\r\n                    // text shadow color, default is 'rgba(0,0,0,0.3)'\r\n                    shadowColor: \"rgba(255,0,0,0.75)\",\r\n\r\n                    // draw label in arc, default is false\r\n                    // bar chart ignores this\r\n                    arc: true,\r\n\r\n                    // position to draw label, available value is 'default', 'border' and 'outside'\r\n                    // bar chart ignores this\r\n                    // default is 'default'\r\n                    position: \"inside\",\r\n\r\n                    // draw label even it's overlap, default is true\r\n                    // bar chart ignores this\r\n                    overlap: false,\r\n\r\n                    // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\r\n                    showActualPercentages: true,\r\n\r\n                    // add padding when position is `outside`\r\n                    // default is 2\r\n                    outsidePadding: 4,\r\n\r\n                    // add margin of text when position is `outside` or `border`\r\n                    // default is 2\r\n                    textMargin: 14\r\n                }\r\n            }\r\n        };\r\n\r\n        const optionsMobile = {\r\n            legend: { display: true, position: \"bottom\", fullWidth: true },\r\n            layout: { padding: { left: 15, right: 15, top: 15, bottom: 15 } },\r\n            cutoutPercentage: 0,\r\n            plugins: {\r\n                labels: {\r\n                    // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\r\n                    render: \"percentage\",\r\n\r\n                    // precision for percentage, default is 0\r\n                    precision: 0,\r\n\r\n                    // identifies whether or not labels of value 0 are displayed, default is false\r\n                    showZero: true,\r\n\r\n                    // font size, default is defaultFontSize\r\n                    fontSize: 12,\r\n\r\n                    // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\r\n                    fontColor: \"#000\",\r\n\r\n                    // font style, default is defaultFontStyle\r\n                    fontStyle: \"normal\",\r\n\r\n                    // font family, default is defaultFontFamily\r\n                    fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n\r\n                    // draw text shadows under labels, default is false\r\n                    textShadow: true,\r\n\r\n                    // text shadow intensity, default is 6\r\n                    shadowBlur: 10,\r\n\r\n                    // text shadow X offset, default is 3\r\n                    shadowOffsetX: -5,\r\n\r\n                    // text shadow Y offset, default is 3\r\n                    shadowOffsetY: 5,\r\n\r\n                    // text shadow color, default is 'rgba(0,0,0,0.3)'\r\n                    shadowColor: \"rgba(255,0,0,0.75)\",\r\n\r\n                    // draw label in arc, default is false\r\n                    // bar chart ignores this\r\n                    arc: true,\r\n\r\n                    // position to draw label, available value is 'default', 'border' and 'outside'\r\n                    // bar chart ignores this\r\n                    // default is 'default'\r\n                    position: \"inside\",\r\n\r\n                    // draw label even it's overlap, default is true\r\n                    // bar chart ignores this\r\n                    overlap: false,\r\n\r\n                    // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\r\n                    showActualPercentages: true,\r\n\r\n                    // add padding when position is `outside`\r\n                    // default is 2\r\n                    outsidePadding: 4,\r\n\r\n                    // add margin of text when position is `outside` or `border`\r\n                    // default is 2\r\n                    textMargin: 4\r\n                }\r\n            }\r\n        };\r\n        const mobPad15 = { padding: window.screen.width > 720 ? \"0\" : \"15px\" };\r\n\r\n        return (\r\n            <div>\r\n                <hr />\r\n                <h4 style={mobPad15}>Category Analyser</h4>\r\n                <Route\r\n                    render={({ history }) => (\r\n                        <Doughnut\r\n                            data={data}\r\n                            options={window.screen.width > 720 ? options : optionsMobile}\r\n                            height={window.screen.width > 720 ? 80 : 350}\r\n                            responsive={true}\r\n                            onElementsClick={elems => {\r\n                                if (elems.length) {\r\n                                    const clickedLabel = elems[0]._model.label;\r\n                                    history.push(\r\n                                        `/filter-view?category=${clickedLabel}&selectedMonth=${selectedMonth}&selectedYear=${selectedYear}&from=monthpage`\r\n                                    );\r\n                                }\r\n                            }}\r\n                        />\r\n                    )}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default DoughnutChart;\r\n"]},"metadata":{},"sourceType":"module"}