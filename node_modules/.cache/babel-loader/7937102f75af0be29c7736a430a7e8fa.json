{"ast":null,"code":"import _classCallCheck from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\src\\\\components\\\\Statistics\\\\BarChartAllMonths.js\";\nimport React, { Component } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport Loader from \"../Common/Loader\";\nimport * as utils from \"../Util\";\nimport \"chartjs-plugin-labels\";\n\nvar BarChartAllMonths =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BarChartAllMonths, _Component);\n\n  function BarChartAllMonths(props) {\n    var _this;\n\n    _classCallCheck(this, BarChartAllMonths);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BarChartAllMonths).call(this, props));\n    _this.state = {\n      year: new Date().getFullYear().toString()\n    };\n    return _this;\n  }\n\n  _createClass(BarChartAllMonths, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var change = {};\n      change[e.target.name] = e.target.value;\n      this.setState(change);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var expenses = this.props.expenses;\n      var currentUser = this.props.authUser;\n      var selectedYear = this.state.year;\n\n      if (!expenses || !currentUser) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, React.createElement(Loader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }));\n      }\n\n      if (expenses && currentUser) {\n        var eachExpense = utils.eachExpense(expenses);\n        var allMonthsTotals = utils.totalExpensesInEachMonthOfThisYear(expenses, eachExpense, currentUser, selectedYear);\n        var data = {\n          labels: [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUNE\", \"JULY\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"],\n          datasets: [{\n            data: allMonthsTotals,\n            backgroundColor: \"rgba(66,133,234,0.8)\",\n            borderColor: \"rgba(66,133,234,1)\",\n            borderWidth: 2,\n            hoverBackgroundColor: \"rgba(66,133,234,0.6)\",\n            hoverBorderColor: \"rgba(66,133,234,1)\"\n          }]\n        };\n        var options = {\n          legend: {\n            display: false\n          },\n          plugins: {\n            labels: {\n              // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n              render: \"value\",\n              // precision for percentage, default is 0\n              precision: 0,\n              // identifies whether or not labels of value 0 are displayed, default is false\n              showZero: true,\n              // font size, default is defaultFontSize\n              fontSize: 12,\n              // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n              fontColor: \"#000\",\n              // font style, default is defaultFontStyle\n              fontStyle: \"bold\",\n              // font family, default is defaultFontFamily\n              fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n              // draw text shadows under labels, default is false\n              textShadow: true,\n              // text shadow intensity, default is 6\n              shadowBlur: 10,\n              // text shadow X offset, default is 3\n              shadowOffsetX: -5,\n              // text shadow Y offset, default is 3\n              shadowOffsetY: 5,\n              // text shadow color, default is 'rgba(0,0,0,0.3)'\n              shadowColor: \"rgba(255,0,0,0.75)\",\n              // draw label in arc, default is false\n              // bar chart ignores this\n              arc: true,\n              // position to draw label, available value is 'default', 'border' and 'outside'\n              // bar chart ignores this\n              // default is 'default'\n              position: \"inside\",\n              // draw label even it's overlap, default is true\n              // bar chart ignores this\n              overlap: false,\n              // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n              showActualPercentages: true,\n              // add padding when position is `outside`\n              // default is 2\n              outsidePadding: 4,\n              // add margin of text when position is `outside` or `border`\n              // default is 2\n              textMargin: 14\n            }\n          }\n        };\n        var monthDropdown = {\n          display: \"block\",\n          background: \"#DDDDDD\",\n          float: \"right\",\n          color: \"#000\",\n          border: \"none\",\n          padding: \"0px 5px 0px 0px\"\n        };\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-sm-12\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-sm-12 col-xs-12\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, React.createElement(\"select\", {\n          name: \"year\",\n          style: monthDropdown,\n          value: this.state.year,\n          onChange: this.handleChange.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, utils.yearsGenereator().map(function (elem, i) {\n          return React.createElement(\"option\", {\n            key: i,\n            value: elem,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150\n            },\n            __self: this\n          }, elem);\n        })))))), React.createElement(Bar, {\n          data: data,\n          height: window.screen.width > 720 ? 140 : 250,\n          options: options,\n          responsive: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return BarChartAllMonths;\n}(Component);\n\nexport default BarChartAllMonths;","map":{"version":3,"sources":["G:\\Workspace\\2018\\expense-manager-react\\src\\components\\Statistics\\BarChartAllMonths.js"],"names":["React","Component","Bar","Loader","utils","BarChartAllMonths","props","state","year","Date","getFullYear","toString","e","change","target","name","value","setState","expenses","currentUser","authUser","selectedYear","eachExpense","allMonthsTotals","totalExpensesInEachMonthOfThisYear","data","labels","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","options","legend","display","plugins","render","precision","showZero","fontSize","fontColor","fontStyle","fontFamily","textShadow","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","arc","position","overlap","showActualPercentages","outsidePadding","textMargin","monthDropdown","background","float","color","border","padding","handleChange","bind","yearsGenereator","map","elem","i","window","screen","width"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AAEA,OAAO,uBAAP;;IAEMC,iB;;;;;AACF,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,2FAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,GAAyBC,QAAzB;AADG,KAAb;AAHe;AAMlB;;;;iCAEYC,C,EAAG;AACZ,UAAIC,MAAM,GAAG,EAAb;AACAA,MAAAA,MAAM,CAACD,CAAC,CAACE,MAAF,CAASC,IAAV,CAAN,GAAwBH,CAAC,CAACE,MAAF,CAASE,KAAjC;AACA,WAAKC,QAAL,CAAcJ,MAAd;AACH;;;6BAEQ;AACL,UAAIK,QAAQ,GAAG,KAAKZ,KAAL,CAAWY,QAA1B;AACA,UAAIC,WAAW,GAAG,KAAKb,KAAL,CAAWc,QAA7B;AACA,UAAIC,YAAY,GAAG,KAAKd,KAAL,CAAWC,IAA9B;;AAEA,UAAI,CAACU,QAAD,IAAa,CAACC,WAAlB,EAA+B;AAC3B,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;AAKH;;AAED,UAAID,QAAQ,IAAIC,WAAhB,EAA6B;AACzB,YAAIG,WAAW,GAAGlB,KAAK,CAACkB,WAAN,CAAkBJ,QAAlB,CAAlB;AACA,YAAIK,eAAe,GAAGnB,KAAK,CAACoB,kCAAN,CAClBN,QADkB,EAElBI,WAFkB,EAGlBH,WAHkB,EAIlBE,YAJkB,CAAtB;AAOA,YAAII,IAAI,GAAG;AACPC,UAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,MAApC,EAA4C,MAA5C,EAAoD,KAApD,EAA2D,KAA3D,EAAkE,KAAlE,EAAyE,KAAzE,EAAgF,KAAhF,CADD;AAEPC,UAAAA,QAAQ,EAAE,CACN;AACIF,YAAAA,IAAI,EAAEF,eADV;AAEIK,YAAAA,eAAe,EAAE,sBAFrB;AAGIC,YAAAA,WAAW,EAAE,oBAHjB;AAIIC,YAAAA,WAAW,EAAE,CAJjB;AAKIC,YAAAA,oBAAoB,EAAE,sBAL1B;AAMIC,YAAAA,gBAAgB,EAAE;AANtB,WADM;AAFH,SAAX;AAcA,YAAMC,OAAO,GAAG;AACZC,UAAAA,MAAM,EAAE;AACJC,YAAAA,OAAO,EAAE;AADL,WADI;AAIZC,UAAAA,OAAO,EAAE;AACLV,YAAAA,MAAM,EAAE;AACJ;AACAW,cAAAA,MAAM,EAAE,OAFJ;AAIJ;AACAC,cAAAA,SAAS,EAAE,CALP;AAOJ;AACAC,cAAAA,QAAQ,EAAE,IARN;AAUJ;AACAC,cAAAA,QAAQ,EAAE,EAXN;AAaJ;AACAC,cAAAA,SAAS,EAAE,MAdP;AAgBJ;AACAC,cAAAA,SAAS,EAAE,MAjBP;AAmBJ;AACAC,cAAAA,UAAU,EAAE,oDApBR;AAsBJ;AACAC,cAAAA,UAAU,EAAE,IAvBR;AAyBJ;AACAC,cAAAA,UAAU,EAAE,EA1BR;AA4BJ;AACAC,cAAAA,aAAa,EAAE,CAAC,CA7BZ;AA+BJ;AACAC,cAAAA,aAAa,EAAE,CAhCX;AAkCJ;AACAC,cAAAA,WAAW,EAAE,oBAnCT;AAqCJ;AACA;AACAC,cAAAA,GAAG,EAAE,IAvCD;AAyCJ;AACA;AACA;AACAC,cAAAA,QAAQ,EAAE,QA5CN;AA8CJ;AACA;AACAC,cAAAA,OAAO,EAAE,KAhDL;AAkDJ;AACAC,cAAAA,qBAAqB,EAAE,IAnDnB;AAqDJ;AACA;AACAC,cAAAA,cAAc,EAAE,CAvDZ;AAyDJ;AACA;AACAC,cAAAA,UAAU,EAAE;AA3DR;AADH;AAJG,SAAhB;AAqEA,YAAMC,aAAa,GAAG;AAClBpB,UAAAA,OAAO,EAAE,OADS;AAElBqB,UAAAA,UAAU,EAAE,SAFM;AAGlBC,UAAAA,KAAK,EAAE,OAHW;AAIlBC,UAAAA,KAAK,EAAE,MAJW;AAKlBC,UAAAA,MAAM,EAAE,MALU;AAMlBC,UAAAA,OAAO,EAAE;AANS,SAAtB;AASA,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,KAAK,EAAEL,aAFX;AAGI,UAAA,KAAK,EAAE,KAAKhD,KAAL,CAAWC,IAHtB;AAII,UAAA,QAAQ,EAAE,KAAKqD,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMK1D,KAAK,CAAC2D,eAAN,GAAwBC,GAAxB,CAA4B,UAACC,IAAD,EAAOC,CAAP;AAAA,iBACzB;AAAQ,YAAA,GAAG,EAAEA,CAAb;AAAgB,YAAA,KAAK,EAAED,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA8BA,IAA9B,CADyB;AAAA,SAA5B,CANL,CADJ,CADJ,CADJ,CADJ,CADJ,EAmBI,oBAAC,GAAD;AACI,UAAA,IAAI,EAAExC,IADV;AAEI,UAAA,MAAM,EAAE0C,MAAM,CAACC,MAAP,CAAcC,KAAd,GAAsB,GAAtB,GAA4B,GAA5B,GAAkC,GAF9C;AAGI,UAAA,OAAO,EAAEpC,OAHb;AAII,UAAA,UAAU,EAAE,IAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAnBJ,CADJ;AA4BH;AACJ;;;;EA9J2BhC,S;;AAiKhC,eAAeI,iBAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport Loader from \"../Common/Loader\";\r\nimport * as utils from \"../Util\";\r\n\r\nimport \"chartjs-plugin-labels\";\r\n\r\nclass BarChartAllMonths extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            year: new Date().getFullYear().toString()\r\n        };\r\n    }\r\n\r\n    handleChange(e) {\r\n        var change = {};\r\n        change[e.target.name] = e.target.value;\r\n        this.setState(change);\r\n    }\r\n\r\n    render() {\r\n        let expenses = this.props.expenses;\r\n        let currentUser = this.props.authUser;\r\n        let selectedYear = this.state.year;\r\n\r\n        if (!expenses || !currentUser) {\r\n            return (\r\n                <div>\r\n                    <Loader />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (expenses && currentUser) {\r\n            let eachExpense = utils.eachExpense(expenses);\r\n            let allMonthsTotals = utils.totalExpensesInEachMonthOfThisYear(\r\n                expenses,\r\n                eachExpense,\r\n                currentUser,\r\n                selectedYear\r\n            );\r\n\r\n            let data = {\r\n                labels: [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUNE\", \"JULY\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"],\r\n                datasets: [\r\n                    {\r\n                        data: allMonthsTotals,\r\n                        backgroundColor: \"rgba(66,133,234,0.8)\",\r\n                        borderColor: \"rgba(66,133,234,1)\",\r\n                        borderWidth: 2,\r\n                        hoverBackgroundColor: \"rgba(66,133,234,0.6)\",\r\n                        hoverBorderColor: \"rgba(66,133,234,1)\"\r\n                    }\r\n                ]\r\n            };\r\n\r\n            const options = {\r\n                legend: {\r\n                    display: false\r\n                },\r\n                plugins: {\r\n                    labels: {\r\n                        // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\r\n                        render: \"value\",\r\n\r\n                        // precision for percentage, default is 0\r\n                        precision: 0,\r\n\r\n                        // identifies whether or not labels of value 0 are displayed, default is false\r\n                        showZero: true,\r\n\r\n                        // font size, default is defaultFontSize\r\n                        fontSize: 12,\r\n\r\n                        // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\r\n                        fontColor: \"#000\",\r\n\r\n                        // font style, default is defaultFontStyle\r\n                        fontStyle: \"bold\",\r\n\r\n                        // font family, default is defaultFontFamily\r\n                        fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n\r\n                        // draw text shadows under labels, default is false\r\n                        textShadow: true,\r\n\r\n                        // text shadow intensity, default is 6\r\n                        shadowBlur: 10,\r\n\r\n                        // text shadow X offset, default is 3\r\n                        shadowOffsetX: -5,\r\n\r\n                        // text shadow Y offset, default is 3\r\n                        shadowOffsetY: 5,\r\n\r\n                        // text shadow color, default is 'rgba(0,0,0,0.3)'\r\n                        shadowColor: \"rgba(255,0,0,0.75)\",\r\n\r\n                        // draw label in arc, default is false\r\n                        // bar chart ignores this\r\n                        arc: true,\r\n\r\n                        // position to draw label, available value is 'default', 'border' and 'outside'\r\n                        // bar chart ignores this\r\n                        // default is 'default'\r\n                        position: \"inside\",\r\n\r\n                        // draw label even it's overlap, default is true\r\n                        // bar chart ignores this\r\n                        overlap: false,\r\n\r\n                        // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\r\n                        showActualPercentages: true,\r\n\r\n                        // add padding when position is `outside`\r\n                        // default is 2\r\n                        outsidePadding: 4,\r\n\r\n                        // add margin of text when position is `outside` or `border`\r\n                        // default is 2\r\n                        textMargin: 14\r\n                    }\r\n                }\r\n            };\r\n\r\n            const monthDropdown = {\r\n                display: \"block\",\r\n                background: \"#DDDDDD\",\r\n                float: \"right\",\r\n                color: \"#000\",\r\n                border: \"none\",\r\n                padding: \"0px 5px 0px 0px\"\r\n            };\r\n\r\n            return (\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-12\">\r\n                            <form>\r\n                                <div className=\"col-sm-12 col-xs-12\">\r\n                                    <select\r\n                                        name=\"year\"\r\n                                        style={monthDropdown}\r\n                                        value={this.state.year}\r\n                                        onChange={this.handleChange.bind(this)}\r\n                                    >\r\n                                        {utils.yearsGenereator().map((elem, i) => (\r\n                                            <option key={i} value={elem}>{elem}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                    <Bar\r\n                        data={data}\r\n                        height={window.screen.width > 720 ? 140 : 250}\r\n                        options={options}\r\n                        responsive={true}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default BarChartAllMonths;\r\n"]},"metadata":{},"sourceType":"module"}