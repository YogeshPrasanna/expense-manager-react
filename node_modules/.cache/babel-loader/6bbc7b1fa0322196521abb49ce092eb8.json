{"ast":null,"code":"var _jsxFileName = \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\src\\\\components\\\\MonthView\\\\LineChartTimeline.js\";\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Loader from \"../Common/Loader\";\nimport * as utils from \"../Util\";\nimport moment from \"moment\";\n\nvar LineChartExpenseTimeline = function LineChartExpenseTimeline(props) {\n  var expenses = props.expenses;\n  var currentUser = props.authUser;\n  var selectedMonth = props.month;\n  var selectedYear = props.year;\n\n  if (!expenses || !currentUser || !selectedMonth || !selectedYear) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }));\n  }\n\n  if (expenses && currentUser && selectedMonth && selectedYear) {\n    var eachExpense = utils.eachExpense(expenses);\n    var usersExpensesInSelectedMonthAndYear = utils.expensesinMonthAndYear(eachExpense, currentUser, selectedMonth, selectedYear);\n    var totals = {};\n    var dayStart = [];\n    var dayEnd = [];\n    var allDatesInSelectedMonth = utils.getAllTheDatesInAMonth(selectedYear, selectedMonth);\n    var TotalInThatDay = allDatesInSelectedMonth.map(function (date) {\n      var expensesOnThatDate = usersExpensesInSelectedMonthAndYear.filter(function (exp) {\n        return Number(exp.value.date === date);\n      });\n      totals[date] = expensesOnThatDate.map(function (elem) {\n        return Number(elem.value.expense);\n      }).length >= 1 ? expensesOnThatDate.map(function (elem) {\n        return Number(elem.value.expense);\n      }).reduce(function (prev, cur) {\n        return prev + cur;\n      }) : 0;\n    });\n    var today = moment().format(\"MM/DD/YYYY\");\n\n    for (var i = 0; i < moment(allDatesInSelectedMonth[0]).day(); i++) {\n      dayStart.push(i);\n    }\n\n    for (var _i = 0; _i < Math.abs(moment(allDatesInSelectedMonth[allDatesInSelectedMonth.length - 1]).day() - 6); _i++) {\n      dayEnd.push(_i);\n    }\n\n    var data = {\n      labels: Object.keys(totals).map(function (date) {\n        return date.substr(3, 2);\n      }),\n      type: 'line',\n      datasets: [{\n        label: \"Expense\",\n        fill: false,\n        // lineTension: 0.1,\n        // backgroundColor: \"rgba(75,192,192,0.4)\",\n        // borderColor: \"rgba(75,192,192,1)\",\n        // borderCapStyle: \"butt\",\n        // borderDash: [],\n        // borderDashOffset: 0.0,\n        // borderJoinStyle: \"miter\",\n        // pointBorderColor: \"rgba(75,192,192,1)\",\n        // pointBackgroundColor: \"#fff\",\n        // pointBorderWidth: 1,\n        // pointHoverRadius: 5,\n        // pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        // pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        // pointHoverBorderWidth: 2,\n        // pointRadius: 1,\n        // pointHitRadius: 10,\n        // fill: true,\n        data: Object.values(totals),\n        borderColor: \"transparent\",\n        // backgroundColor: \"rgb(0,0,0,0.3)\",\n        backgroundColor: \"rgb(68, 159, 238)\",\n        pointBackgroundColor: \"rgba(0,0,0,0)\",\n        pointBorderColor: \"rgba(0,0,0,0)\",\n        borderWidth: 4\n      }]\n    };\n    var lineArea = {\n      background: \"#DDDDDD\"\n    };\n    var mobPad15 = {\n      padding: window.screen.width > 720 ? \"0\" : \"15px\"\n    };\n    var options = {\n      scales: {\n        xAxes: [{\n          gridLines: {\n            color: \"rgba(0, 0, 0, 0)\"\n          }\n        }],\n        yAxes: [{\n          gridLines: {\n            color: \"rgba(0, 0, 0, 0)\"\n          },\n          scaleLabel: {\n            display: false,\n            labelString: \"Normalized/Indexed Data\"\n          },\n          ticks: {\n            display: false\n          }\n        }]\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      style: mobPad15,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Expense Timeline\"), React.createElement(\"div\", {\n      className: \"col-sm-12 mobileNoPadding\",\n      style: lineArea,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \" \", React.createElement(Line, {\n      data: data,\n      options: options,\n      height: window.screen.width > 720 ? 70 : 150,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })));\n  }\n};\n\nexport default LineChartExpenseTimeline;","map":{"version":3,"sources":["G:\\Workspace\\2018\\expense-manager-react\\src\\components\\MonthView\\LineChartTimeline.js"],"names":["React","Line","Loader","utils","moment","LineChartExpenseTimeline","props","expenses","currentUser","authUser","selectedMonth","month","selectedYear","year","eachExpense","usersExpensesInSelectedMonthAndYear","expensesinMonthAndYear","totals","dayStart","dayEnd","allDatesInSelectedMonth","getAllTheDatesInAMonth","TotalInThatDay","map","date","expensesOnThatDate","filter","exp","Number","value","elem","expense","length","reduce","prev","cur","today","format","i","day","push","Math","abs","data","labels","Object","keys","substr","type","datasets","label","fill","values","borderColor","backgroundColor","pointBackgroundColor","pointBorderColor","borderWidth","lineArea","background","mobPad15","padding","window","screen","width","options","scales","xAxes","gridLines","color","yAxes","scaleLabel","display","labelString","ticks"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAAC,KAAK,EAAI;AACtC,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AACA,MAAIC,WAAW,GAAGF,KAAK,CAACG,QAAxB;AACA,MAAIC,aAAa,GAAGJ,KAAK,CAACK,KAA1B;AACA,MAAIC,YAAY,GAAGN,KAAK,CAACO,IAAzB;;AAEA,MAAI,CAACN,QAAD,IAAa,CAACC,WAAd,IAA6B,CAACE,aAA9B,IAA+C,CAACE,YAApD,EAAkE;AAC9D,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AAED,MAAIL,QAAQ,IAAIC,WAAZ,IAA2BE,aAA3B,IAA4CE,YAAhD,EAA8D;AAC1D,QAAIE,WAAW,GAAGX,KAAK,CAACW,WAAN,CAAkBP,QAAlB,CAAlB;AACA,QAAIQ,mCAAmC,GAAGZ,KAAK,CAACa,sBAAN,CACtCF,WADsC,EAEtCN,WAFsC,EAGtCE,aAHsC,EAItCE,YAJsC,CAA1C;AAOA,QAAIK,MAAM,GAAG,EAAb;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,MAAM,GAAG,EAAb;AAEA,QAAIC,uBAAuB,GAAGjB,KAAK,CAACkB,sBAAN,CAA6BT,YAA7B,EAA2CF,aAA3C,CAA9B;AACA,QAAIY,cAAc,GAAGF,uBAAuB,CAACG,GAAxB,CAA4B,UAAAC,IAAI,EAAI;AACrD,UAAIC,kBAAkB,GAAGV,mCAAmC,CAACW,MAApC,CAA2C,UAAAC,GAAG;AAAA,eAAIC,MAAM,CAACD,GAAG,CAACE,KAAJ,CAAUL,IAAV,KAAmBA,IAApB,CAAV;AAAA,OAA9C,CAAzB;AACAP,MAAAA,MAAM,CAACO,IAAD,CAAN,GACIC,kBAAkB,CAACF,GAAnB,CAAuB,UAAAO,IAAI;AAAA,eAAIF,MAAM,CAACE,IAAI,CAACD,KAAL,CAAWE,OAAZ,CAAV;AAAA,OAA3B,EAA2DC,MAA3D,IAAqE,CAArE,GACMP,kBAAkB,CAACF,GAAnB,CAAuB,UAAAO,IAAI;AAAA,eAAIF,MAAM,CAACE,IAAI,CAACD,KAAL,CAAWE,OAAZ,CAAV;AAAA,OAA3B,EAA2DE,MAA3D,CAAkE,UAACC,IAAD,EAAOC,GAAP;AAAA,eAAeD,IAAI,GAAGC,GAAtB;AAAA,OAAlE,CADN,GAEM,CAHV;AAIH,KANoB,CAArB;AAQA,QAAMC,KAAK,GAAGhC,MAAM,GAAGiC,MAAT,CAAgB,YAAhB,CAAd;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlC,MAAM,CAACgB,uBAAuB,CAAC,CAAD,CAAxB,CAAN,CAAmCmB,GAAnC,EAApB,EAA8DD,CAAC,EAA/D,EAAmE;AAC/DpB,MAAAA,QAAQ,CAACsB,IAAT,CAAcF,CAAd;AACH;;AAED,SACI,IAAIA,EAAC,GAAG,CADZ,EAEIA,EAAC,GAAGG,IAAI,CAACC,GAAL,CAAStC,MAAM,CAACgB,uBAAuB,CAACA,uBAAuB,CAACY,MAAxB,GAAiC,CAAlC,CAAxB,CAAN,CAAoEO,GAApE,KAA4E,CAArF,CAFR,EAGID,EAAC,EAHL,EAIE;AACEnB,MAAAA,MAAM,CAACqB,IAAP,CAAYF,EAAZ;AACH;;AAGD,QAAMK,IAAI,GAAG;AACTC,MAAAA,MAAM,EAAEC,MAAM,CAACC,IAAP,CAAY7B,MAAZ,EAAoBM,GAApB,CAAwB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACuB,MAAL,CAAY,CAAZ,EAAe,CAAf,CAAJ;AAAA,OAA5B,CADC;AAETC,MAAAA,IAAI,EAAE,MAFG;AAGTC,MAAAA,QAAQ,EAAE,CACN;AACIC,QAAAA,KAAK,EAAE,SADX;AAEIC,QAAAA,IAAI,EAAE,KAFV;AAGI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,QAAAA,IAAI,EAAEE,MAAM,CAACO,MAAP,CAAcnC,MAAd,CApBV;AAqBIoC,QAAAA,WAAW,EAAE,aArBjB;AAsBI;AACAC,QAAAA,eAAe,EAAE,mBAvBrB;AAwBIC,QAAAA,oBAAoB,EAAE,eAxB1B;AAyBIC,QAAAA,gBAAgB,EAAE,eAzBtB;AA0BIC,QAAAA,WAAW,EAAE;AA1BjB,OADM;AAHD,KAAb;AAmCA,QAAMC,QAAQ,GAAG;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAjB;AACA,QAAMC,QAAQ,GAAG;AAAEC,MAAAA,OAAO,EAAEC,MAAM,CAACC,MAAP,CAAcC,KAAd,GAAsB,GAAtB,GAA4B,GAA5B,GAAkC;AAA7C,KAAjB;AACA,QAAIC,OAAO,GAAG;AACVC,MAAAA,MAAM,EAAE;AACJC,QAAAA,KAAK,EAAE,CAAC;AACJC,UAAAA,SAAS,EAAE;AACPC,YAAAA,KAAK,EAAE;AADA;AADP,SAAD,CADH;AAMJC,QAAAA,KAAK,EAAE,CAAC;AACJF,UAAAA,SAAS,EAAE;AACPC,YAAAA,KAAK,EAAE;AADA,WADP;AAIJE,UAAAA,UAAU,EAAE;AACRC,YAAAA,OAAO,EAAE,KADD;AAERC,YAAAA,WAAW,EAAE;AAFL,WAJR;AASJC,UAAAA,KAAK,EAAE;AACHF,YAAAA,OAAO,EAAE;AADN;AATH,SAAD;AANH;AADE,KAAd;AAuBA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,KAAK,EAAEZ,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEI;AAAK,MAAA,SAAS,EAAC,2BAAf;AAA2C,MAAA,KAAK,EAAEF,QAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,GADL,EAEI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAEf,IAAZ;AAAkB,MAAA,OAAO,EAAEsB,OAA3B;AAAoC,MAAA,MAAM,EAAEH,MAAM,CAACC,MAAP,CAAcC,KAAd,GAAsB,GAAtB,GAA4B,EAA5B,GAAiC,GAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAFJ,CADJ;AASH;AACJ,CAzHD;;AA2HA,eAAe3D,wBAAf","sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport Loader from \"../Common/Loader\";\r\nimport * as utils from \"../Util\";\r\nimport moment from \"moment\";\r\n\r\nconst LineChartExpenseTimeline = props => {\r\n    let expenses = props.expenses;\r\n    let currentUser = props.authUser;\r\n    let selectedMonth = props.month;\r\n    let selectedYear = props.year;\r\n\r\n    if (!expenses || !currentUser || !selectedMonth || !selectedYear) {\r\n        return (\r\n            <div>\r\n                <Loader />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (expenses && currentUser && selectedMonth && selectedYear) {\r\n        let eachExpense = utils.eachExpense(expenses);\r\n        let usersExpensesInSelectedMonthAndYear = utils.expensesinMonthAndYear(\r\n            eachExpense,\r\n            currentUser,\r\n            selectedMonth,\r\n            selectedYear\r\n        );\r\n\r\n        let totals = {};\r\n        let dayStart = [];\r\n        let dayEnd = [];\r\n\r\n        let allDatesInSelectedMonth = utils.getAllTheDatesInAMonth(selectedYear, selectedMonth);\r\n        let TotalInThatDay = allDatesInSelectedMonth.map(date => {\r\n            var expensesOnThatDate = usersExpensesInSelectedMonthAndYear.filter(exp => Number(exp.value.date === date));\r\n            totals[date] =\r\n                expensesOnThatDate.map(elem => Number(elem.value.expense)).length >= 1\r\n                    ? expensesOnThatDate.map(elem => Number(elem.value.expense)).reduce((prev, cur) => prev + cur)\r\n                    : 0;\r\n        });\r\n\r\n        const today = moment().format(\"MM/DD/YYYY\");\r\n\r\n        for (let i = 0; i < moment(allDatesInSelectedMonth[0]).day(); i++) {\r\n            dayStart.push(i);\r\n        }\r\n\r\n        for (\r\n            let i = 0;\r\n            i < Math.abs(moment(allDatesInSelectedMonth[allDatesInSelectedMonth.length - 1]).day() - 6);\r\n            i++\r\n        ) {\r\n            dayEnd.push(i);\r\n        }\r\n\r\n\r\n        const data = {\r\n            labels: Object.keys(totals).map(date => date.substr(3, 2)),\r\n            type: 'line',\r\n            datasets: [\r\n                {\r\n                    label: \"Expense\",\r\n                    fill: false,\r\n                    // lineTension: 0.1,\r\n                    // backgroundColor: \"rgba(75,192,192,0.4)\",\r\n                    // borderColor: \"rgba(75,192,192,1)\",\r\n                    // borderCapStyle: \"butt\",\r\n                    // borderDash: [],\r\n                    // borderDashOffset: 0.0,\r\n                    // borderJoinStyle: \"miter\",\r\n                    // pointBorderColor: \"rgba(75,192,192,1)\",\r\n                    // pointBackgroundColor: \"#fff\",\r\n                    // pointBorderWidth: 1,\r\n                    // pointHoverRadius: 5,\r\n                    // pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\r\n                    // pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n                    // pointHoverBorderWidth: 2,\r\n                    // pointRadius: 1,\r\n                    // pointHitRadius: 10,\r\n                    // fill: true,\r\n                    data: Object.values(totals),\r\n                    borderColor: \"transparent\",\r\n                    // backgroundColor: \"rgb(0,0,0,0.3)\",\r\n                    backgroundColor: \"rgb(68, 159, 238)\",\r\n                    pointBackgroundColor: \"rgba(0,0,0,0)\",\r\n                    pointBorderColor: \"rgba(0,0,0,0)\",\r\n                    borderWidth: 4\r\n                }\r\n            ]\r\n        };\r\n\r\n        const lineArea = { background: \"#DDDDDD\" };\r\n        const mobPad15 = { padding: window.screen.width > 720 ? \"0\" : \"15px\" };\r\n        var options = {\r\n            scales: {\r\n                xAxes: [{\r\n                    gridLines: {\r\n                        color: \"rgba(0, 0, 0, 0)\",\r\n                    },\r\n                }],\r\n                yAxes: [{\r\n                    gridLines: {\r\n                        color: \"rgba(0, 0, 0, 0)\",\r\n                    },\r\n                    scaleLabel: {\r\n                        display: false,\r\n                        labelString: \"Normalized/Indexed Data\",\r\n\r\n                    },\r\n                    ticks: {\r\n                        display: false\r\n                    }\r\n                }]\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h4 style={mobPad15}>Expense Timeline</h4>\r\n                <div className=\"col-sm-12 mobileNoPadding\" style={lineArea}>\r\n                    {\" \"}\r\n                    <Line data={data} options={options} height={window.screen.width > 720 ? 70 : 150} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default LineChartExpenseTimeline;\r\n"]},"metadata":{},"sourceType":"module"}