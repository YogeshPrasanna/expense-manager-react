{"ast":null,"code":"import _classCallCheck from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\src\\\\components\\\\Statistics\\\\DoughnutChartCategory.js\";\nimport React, { Component } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport Loader from \"../Common/Loader\";\nimport * as utils from \"../Util\";\nimport \"chartjs-plugin-labels\";\nimport { Route } from \"react-router-dom\";\n\nvar DoughnutChartCategory =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DoughnutChartCategory, _Component);\n\n  function DoughnutChartCategory(props) {\n    var _this;\n\n    _classCallCheck(this, DoughnutChartCategory);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DoughnutChartCategory).call(this, props));\n    _this.state = {\n      year: \"all\"\n    };\n    return _this;\n  }\n\n  _createClass(DoughnutChartCategory, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var change = {};\n      change[e.target.name] = e.target.value;\n      this.setState(change);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var expenses = this.props.expenses;\n      var currentUser = this.props.authUser;\n      var selectedYear = this.state.year;\n      var settings = this.props.settings;\n      var allCategoryTotals = null;\n      var monthDropdown = {\n        display: \"block\",\n        background: \"#DDDDDD\",\n        float: \"right\",\n        color: \"#000\",\n        border: \"none\",\n        padding: \"0px 5px 0px 0px\"\n      };\n      var formStyle = {\n        position: \"absolute\",\n        top: \"0\",\n        padding: \"15px\",\n        right: \"-15px\",\n        zIndex: \"9\"\n      };\n\n      if (!expenses || !currentUser || !settings) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(Loader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }));\n      }\n\n      if (expenses && currentUser && selectedYear && settings) {\n        var eachExpense = utils.eachExpense(expenses);\n        var usersExpenses = utils.currentUsersExpenses(eachExpense, currentUser); //allCategoryTotals = utils.calculateTotalForAllCategories(usersExpenses);\n        // dropdown selection all / any year\n\n        if (selectedYear == \"all\") {\n          allCategoryTotals = utils.calculateTotalForAllCategories(usersExpenses);\n        } else {\n          allCategoryTotals = utils.calculateTotalForAllCategories(utils.expensesinSelectedYear(eachExpense, currentUser, selectedYear.toString()));\n        }\n\n        var data = {\n          labels: utils.categories,\n          datasets: [{\n            data: Object.values(allCategoryTotals),\n            backgroundColor: utils.categoryColors,\n            hoverBackgroundColor: utils.categoryColors\n          }]\n        };\n        var options = {\n          legend: {\n            display: true,\n            position: \"left\",\n            fullWidth: true,\n            reverse: false,\n            labels: {\n              fontColor: \"rgb(247, 162, 120)\"\n            }\n          },\n          layout: {\n            padding: {\n              left: 0,\n              right: 0,\n              top: 15,\n              bottom: 0\n            }\n          },\n          cutoutPercentage: 70,\n          plugins: {\n            labels: {\n              // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n              render: \"percentage\",\n              // precision for percentage, default is 0\n              precision: 0,\n              // identifies whether or not labels of value 0 are displayed, default is false\n              showZero: true,\n              // font size, default is defaultFontSize\n              fontSize: 12,\n              // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n              fontColor: \"#000\",\n              // font style, default is defaultFontStyle\n              fontStyle: \"bold\",\n              // font family, default is defaultFontFamily\n              fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n              // draw text shadows under labels, default is false\n              textShadow: true,\n              // text shadow intensity, default is 6\n              shadowBlur: 10,\n              // text shadow X offset, default is 3\n              shadowOffsetX: -5,\n              // text shadow Y offset, default is 3\n              shadowOffsetY: 5,\n              // text shadow color, default is 'rgba(0,0,0,0.3)'\n              shadowColor: \"rgba(255,0,0,0.75)\",\n              // draw label in arc, default is false\n              // bar chart ignores this\n              arc: true,\n              // position to draw label, available value is 'default', 'border' and 'outside'\n              // bar chart ignores this\n              // default is 'default'\n              position: \"inside\",\n              // draw label even it's overlap, default is true\n              // bar chart ignores this\n              overlap: false,\n              // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n              showActualPercentages: true,\n              // add padding when position is `outside`\n              // default is 2\n              outsidePadding: 4,\n              // add margin of text when position is `outside` or `border`\n              // default is 2\n              textMargin: 14\n            }\n          }\n        };\n        var optionsMobile = {\n          legend: {\n            display: true,\n            position: \"left\",\n            fullWidth: true,\n            labels: {\n              fontColor: \"rgb(247, 162, 120)\"\n            }\n          },\n          layout: {\n            padding: {\n              left: 15,\n              right: 15,\n              top: 15,\n              bottom: 15\n            }\n          },\n          cutoutPercentage: 0,\n          plugins: {\n            labels: {\n              // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n              render: \"percentage\",\n              // precision for percentage, default is 0\n              precision: 0,\n              // identifies whether or not labels of value 0 are displayed, default is false\n              showZero: true,\n              // font size, default is defaultFontSize\n              fontSize: 12,\n              // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n              fontColor: \"#000\",\n              // font style, default is defaultFontStyle\n              fontStyle: \"bold\",\n              // font family, default is defaultFontFamily\n              fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n              // draw text shadows under labels, default is false\n              textShadow: true,\n              // text shadow intensity, default is 6\n              shadowBlur: 10,\n              // text shadow X offset, default is 3\n              shadowOffsetX: -5,\n              // text shadow Y offset, default is 3\n              shadowOffsetY: 5,\n              // text shadow color, default is 'rgba(0,0,0,0.3)'\n              shadowColor: \"rgba(255,0,0,0.75)\",\n              // draw label in arc, default is false\n              // bar chart ignores this\n              arc: true,\n              // position to draw label, available value is 'default', 'border' and 'outside'\n              // bar chart ignores this\n              // default is 'default'\n              position: \"inside\",\n              // draw label even it's overlap, default is true\n              // bar chart ignores this\n              overlap: false,\n              // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n              showActualPercentages: true,\n              // add padding when position is `outside`\n              // default is 2\n              outsidePadding: 4,\n              // add margin of text when position is `outside` or `border`\n              // default is 2\n              textMargin: 14\n            }\n          }\n        };\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-sm-12 col-xs-12\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }, React.createElement(\"select\", {\n          name: \"year\",\n          style: monthDropdown,\n          value: this.state.year,\n          onChange: this.handleChange.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          value: \"all\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }, \"All\"), utils.yearsGenereator().map(function (elem, i) {\n          return React.createElement(\"option\", {\n            key: i,\n            value: elem,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 227\n            },\n            __self: this\n          }, elem);\n        })))), React.createElement(Route, {\n          render: function render(_ref) {\n            var history = _ref.history;\n            return React.createElement(Doughnut, {\n              data: data,\n              options: window.screen.width > 720 ? options : optionsMobile,\n              height: window.screen.width > 720 ? 140 : 230,\n              responsive: true,\n              onElementsClick: function onElementsClick(elems) {\n                if (elems.length) {\n                  var clickedLabel = elems[0]._model.label;\n\n                  if (selectedYear !== \"all\") {\n                    history.push(\"/filter-view?category=\".concat(clickedLabel, \"&selectedYear=\").concat(selectedYear, \"&from=yearpage\"));\n                  }\n                }\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 234\n              },\n              __self: this\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return DoughnutChartCategory;\n}(Component);\n\nexport default DoughnutChartCategory;","map":{"version":3,"sources":["G:\\Workspace\\2018\\expense-manager-react\\src\\components\\Statistics\\DoughnutChartCategory.js"],"names":["React","Component","Doughnut","Loader","utils","Route","DoughnutChartCategory","props","state","year","e","change","target","name","value","setState","expenses","currentUser","authUser","selectedYear","settings","allCategoryTotals","monthDropdown","display","background","float","color","border","padding","formStyle","position","top","right","zIndex","eachExpense","usersExpenses","currentUsersExpenses","calculateTotalForAllCategories","expensesinSelectedYear","toString","data","labels","categories","datasets","Object","values","backgroundColor","categoryColors","hoverBackgroundColor","options","legend","fullWidth","reverse","fontColor","layout","left","bottom","cutoutPercentage","plugins","render","precision","showZero","fontSize","fontStyle","fontFamily","textShadow","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","arc","overlap","showActualPercentages","outsidePadding","textMargin","optionsMobile","handleChange","bind","yearsGenereator","map","elem","i","history","window","screen","width","elems","length","clickedLabel","_model","label","push"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport Loader from \"../Common/Loader\";\r\nimport * as utils from \"../Util\";\r\nimport \"chartjs-plugin-labels\";\r\n\r\nimport { Route } from \"react-router-dom\";\r\n\r\nclass DoughnutChartCategory extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            year: \"all\"\r\n        };\r\n    }\r\n\r\n    handleChange(e) {\r\n        var change = {};\r\n        change[e.target.name] = e.target.value;\r\n        this.setState(change);\r\n    }\r\n\r\n    render() {\r\n        const expenses = this.props.expenses;\r\n        const currentUser = this.props.authUser;\r\n        const selectedYear = this.state.year;\r\n        const settings = this.props.settings;\r\n\r\n        let allCategoryTotals = null;\r\n\r\n        const monthDropdown = {\r\n            display: \"block\",\r\n            background: \"#DDDDDD\",\r\n            float: \"right\",\r\n            color: \"#000\",\r\n            border: \"none\",\r\n            padding: \"0px 5px 0px 0px\"\r\n        };\r\n\r\n        const formStyle = { position: \"absolute\", top: \"0\", padding: \"15px\", right: \"-15px\", zIndex: \"9\" };\r\n\r\n        if (!expenses || !currentUser || !settings) {\r\n            return (\r\n                <div>\r\n                    <Loader />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (expenses && currentUser && selectedYear && settings) {\r\n            const eachExpense = utils.eachExpense(expenses);\r\n            const usersExpenses = utils.currentUsersExpenses(eachExpense, currentUser);\r\n\r\n            //allCategoryTotals = utils.calculateTotalForAllCategories(usersExpenses);\r\n\r\n            // dropdown selection all / any year\r\n            if (selectedYear == \"all\") {\r\n                allCategoryTotals = utils.calculateTotalForAllCategories(usersExpenses);\r\n            } else {\r\n                allCategoryTotals = utils.calculateTotalForAllCategories(\r\n                    utils.expensesinSelectedYear(eachExpense, currentUser, selectedYear.toString())\r\n                );\r\n            }\r\n\r\n            const data = {\r\n                labels: utils.categories,\r\n                datasets: [\r\n                    {\r\n                        data: Object.values(allCategoryTotals),\r\n                        backgroundColor: utils.categoryColors,\r\n                        hoverBackgroundColor: utils.categoryColors\r\n                    }\r\n                ]\r\n            };\r\n\r\n            const options = {\r\n                legend: { display: true, position: \"left\", fullWidth: true, reverse: false, labels: { fontColor: \"rgb(247, 162, 120)\" } },\r\n                layout: { padding: { left: 0, right: 0, top: 15, bottom: 0 } },\r\n                cutoutPercentage: 70,\r\n                plugins: {\r\n                    labels: {\r\n                        // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\r\n                        render: \"percentage\",\r\n\r\n                        // precision for percentage, default is 0\r\n                        precision: 0,\r\n\r\n                        // identifies whether or not labels of value 0 are displayed, default is false\r\n                        showZero: true,\r\n\r\n                        // font size, default is defaultFontSize\r\n                        fontSize: 12,\r\n\r\n                        // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\r\n                        fontColor: \"#000\",\r\n\r\n                        // font style, default is defaultFontStyle\r\n                        fontStyle: \"bold\",\r\n\r\n                        // font family, default is defaultFontFamily\r\n                        fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n\r\n                        // draw text shadows under labels, default is false\r\n                        textShadow: true,\r\n\r\n                        // text shadow intensity, default is 6\r\n                        shadowBlur: 10,\r\n\r\n                        // text shadow X offset, default is 3\r\n                        shadowOffsetX: -5,\r\n\r\n                        // text shadow Y offset, default is 3\r\n                        shadowOffsetY: 5,\r\n\r\n                        // text shadow color, default is 'rgba(0,0,0,0.3)'\r\n                        shadowColor: \"rgba(255,0,0,0.75)\",\r\n\r\n                        // draw label in arc, default is false\r\n                        // bar chart ignores this\r\n                        arc: true,\r\n\r\n                        // position to draw label, available value is 'default', 'border' and 'outside'\r\n                        // bar chart ignores this\r\n                        // default is 'default'\r\n                        position: \"inside\",\r\n\r\n                        // draw label even it's overlap, default is true\r\n                        // bar chart ignores this\r\n                        overlap: false,\r\n\r\n                        // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\r\n                        showActualPercentages: true,\r\n\r\n                        // add padding when position is `outside`\r\n                        // default is 2\r\n                        outsidePadding: 4,\r\n\r\n                        // add margin of text when position is `outside` or `border`\r\n                        // default is 2\r\n                        textMargin: 14\r\n                    }\r\n                }\r\n            };\r\n\r\n            const optionsMobile = {\r\n                legend: { display: true, position: \"left\", fullWidth: true, labels: { fontColor: \"rgb(247, 162, 120)\" } },\r\n                layout: { padding: { left: 15, right: 15, top: 15, bottom: 15 } },\r\n                cutoutPercentage: 0,\r\n                plugins: {\r\n                    labels: {\r\n                        // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\r\n                        render: \"percentage\",\r\n\r\n                        // precision for percentage, default is 0\r\n                        precision: 0,\r\n\r\n                        // identifies whether or not labels of value 0 are displayed, default is false\r\n                        showZero: true,\r\n\r\n                        // font size, default is defaultFontSize\r\n                        fontSize: 12,\r\n\r\n                        // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\r\n                        fontColor: \"#000\",\r\n\r\n                        // font style, default is defaultFontStyle\r\n                        fontStyle: \"bold\",\r\n\r\n                        // font family, default is defaultFontFamily\r\n                        fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n\r\n                        // draw text shadows under labels, default is false\r\n                        textShadow: true,\r\n\r\n                        // text shadow intensity, default is 6\r\n                        shadowBlur: 10,\r\n\r\n                        // text shadow X offset, default is 3\r\n                        shadowOffsetX: -5,\r\n\r\n                        // text shadow Y offset, default is 3\r\n                        shadowOffsetY: 5,\r\n\r\n                        // text shadow color, default is 'rgba(0,0,0,0.3)'\r\n                        shadowColor: \"rgba(255,0,0,0.75)\",\r\n\r\n                        // draw label in arc, default is false\r\n                        // bar chart ignores this\r\n                        arc: true,\r\n\r\n                        // position to draw label, available value is 'default', 'border' and 'outside'\r\n                        // bar chart ignores this\r\n                        // default is 'default'\r\n                        position: \"inside\",\r\n\r\n                        // draw label even it's overlap, default is true\r\n                        // bar chart ignores this\r\n                        overlap: false,\r\n\r\n                        // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\r\n                        showActualPercentages: true,\r\n\r\n                        // add padding when position is `outside`\r\n                        // default is 2\r\n                        outsidePadding: 4,\r\n\r\n                        // add margin of text when position is `outside` or `border`\r\n                        // default is 2\r\n                        textMargin: 14\r\n                    }\r\n                }\r\n            };\r\n\r\n            return (\r\n                <div>\r\n                    <form>\r\n                        <div className=\"col-sm-12 col-xs-12\">\r\n                            <select\r\n                                name=\"year\"\r\n                                style={monthDropdown}\r\n                                value={this.state.year}\r\n                                onChange={this.handleChange.bind(this)}\r\n                            >\r\n                                <option value=\"all\">All</option>\r\n                                {utils.yearsGenereator().map((elem, i) => (\r\n                                    <option key={i} value={elem}>{elem}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    </form>\r\n                    <Route\r\n                        render={({ history }) => (\r\n                            <Doughnut\r\n                                data={data}\r\n                                options={window.screen.width > 720 ? options : optionsMobile}\r\n                                height={window.screen.width > 720 ? 140 : 230}\r\n                                responsive={true}\r\n                                onElementsClick={elems => {\r\n                                    if (elems.length) {\r\n                                        let clickedLabel = elems[0]._model.label;\r\n                                        if (selectedYear !== \"all\") {\r\n                                            history.push(\r\n                                                `/filter-view?category=${clickedLabel}&selectedYear=${selectedYear}&from=yearpage`\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default DoughnutChartCategory;\r\n"]},"metadata":{},"sourceType":"module"}