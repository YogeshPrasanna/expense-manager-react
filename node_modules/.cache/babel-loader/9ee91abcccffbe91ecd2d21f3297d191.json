{"ast":null,"code":"'use strict';\n\nmodule.exports = Delaunator;\nmodule.exports.default = Delaunator;\n\nfunction Delaunator(points, getX, getY) {\n  if (!getX) getX = defaultGetX;\n  if (!getY) getY = defaultGetY;\n  var minX = Infinity;\n  var minY = Infinity;\n  var maxX = -Infinity;\n  var maxY = -Infinity;\n  var coords = this.coords = [];\n  var ids = this.ids = new Uint32Array(points.length);\n\n  for (var i = 0; i < points.length; i++) {\n    var p = points[i];\n    var x = getX(p);\n    var y = getY(p);\n    ids[i] = i;\n    coords[2 * i] = x;\n    coords[2 * i + 1] = y;\n    if (x < minX) minX = x;\n    if (y < minY) minY = y;\n    if (x > maxX) maxX = x;\n    if (y > maxY) maxY = y;\n  }\n\n  var cx = (minX + maxX) / 2;\n  var cy = (minY + maxY) / 2;\n  var minDist = Infinity;\n  var i0, i1, i2; // pick a seed point close to the centroid\n\n  for (i = 0; i < points.length; i++) {\n    var d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n\n    if (d < minDist) {\n      i0 = i;\n      minDist = d;\n    }\n  }\n\n  minDist = Infinity; // find the point closest to the seed\n\n  for (i = 0; i < points.length; i++) {\n    if (i === i0) continue;\n    d = dist(coords[2 * i0], coords[2 * i0 + 1], coords[2 * i], coords[2 * i + 1]);\n\n    if (d < minDist && d > 0) {\n      i1 = i;\n      minDist = d;\n    }\n  }\n\n  var minRadius = Infinity; // find the third point which forms the smallest circumcircle with the first two\n\n  for (i = 0; i < points.length; i++) {\n    if (i === i0 || i === i1) continue;\n    var r = circumradius(coords[2 * i0], coords[2 * i0 + 1], coords[2 * i1], coords[2 * i1 + 1], coords[2 * i], coords[2 * i + 1]);\n\n    if (r < minRadius) {\n      i2 = i;\n      minRadius = r;\n    }\n  }\n\n  if (minRadius === Infinity) {\n    throw new Error('No Delaunay triangulation exists for this input.');\n  } // swap the order of the seed points for counter-clockwise orientation\n\n\n  if (area(coords[2 * i0], coords[2 * i0 + 1], coords[2 * i1], coords[2 * i1 + 1], coords[2 * i2], coords[2 * i2 + 1]) < 0) {\n    var tmp = i1;\n    i1 = i2;\n    i2 = tmp;\n  }\n\n  var i0x = coords[2 * i0];\n  var i0y = coords[2 * i0 + 1];\n  var i1x = coords[2 * i1];\n  var i1y = coords[2 * i1 + 1];\n  var i2x = coords[2 * i2];\n  var i2y = coords[2 * i2 + 1];\n  var center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n  this._cx = center.x;\n  this._cy = center.y; // sort the points by distance from the seed triangle circumcenter\n\n  quicksort(ids, coords, 0, ids.length - 1, center.x, center.y); // initialize a hash table for storing edges of the advancing convex hull\n\n  this._hashSize = Math.ceil(Math.sqrt(points.length));\n  this._hash = [];\n\n  for (i = 0; i < this._hashSize; i++) {\n    this._hash[i] = null;\n  } // initialize a circular doubly-linked list that will hold an advancing convex hull\n\n\n  var e = this.hull = insertNode(coords, i0);\n\n  this._hashEdge(e);\n\n  e.t = 0;\n  e = insertNode(coords, i1, e);\n\n  this._hashEdge(e);\n\n  e.t = 1;\n  e = insertNode(coords, i2, e);\n\n  this._hashEdge(e);\n\n  e.t = 2;\n  var maxTriangles = 2 * points.length - 5;\n  var triangles = this.triangles = new Uint32Array(maxTriangles * 3);\n  var halfedges = this.halfedges = new Int32Array(maxTriangles * 3);\n  this.trianglesLen = 0;\n\n  this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n  var xp, yp;\n\n  for (var k = 0; k < ids.length; k++) {\n    i = ids[k];\n    x = coords[2 * i];\n    y = coords[2 * i + 1]; // skip duplicate points\n\n    if (x === xp && y === yp) continue;\n    xp = x;\n    yp = y; // skip seed triangle points\n\n    if (x === i0x && y === i0y || x === i1x && y === i1y || x === i2x && y === i2y) continue; // find a visible edge on the convex hull using edge hash\n\n    var startKey = this._hashKey(x, y);\n\n    var key = startKey;\n    var start;\n\n    do {\n      start = this._hash[key];\n      key = (key + 1) % this._hashSize;\n    } while ((!start || start.removed) && key !== startKey);\n\n    e = start;\n\n    while (area(x, y, e.x, e.y, e.next.x, e.next.y) >= 0) {\n      e = e.next;\n\n      if (e === start) {\n        throw new Error('Something is wrong with the input points.');\n      }\n    }\n\n    var walkBack = e === start; // add the first triangle from the point\n\n    var t = this._addTriangle(e.i, i, e.next.i, -1, -1, e.t);\n\n    e.t = t; // keep track of boundary triangles on the hull\n\n    e = insertNode(coords, i, e); // recursively flip triangles from the point until they satisfy the Delaunay condition\n\n    e.t = this._legalize(t + 2);\n\n    if (e.prev.prev.t === halfedges[t + 1]) {\n      e.prev.prev.t = t + 2;\n    } // walk forward through the hull, adding more triangles and flipping recursively\n\n\n    var q = e.next;\n\n    while (area(x, y, q.x, q.y, q.next.x, q.next.y) < 0) {\n      t = this._addTriangle(q.i, i, q.next.i, q.prev.t, -1, q.t);\n      q.prev.t = this._legalize(t + 2);\n      this.hull = removeNode(q);\n      q = q.next;\n    }\n\n    if (walkBack) {\n      // walk backward from the other side, adding more triangles and flipping\n      q = e.prev;\n\n      while (area(x, y, q.prev.x, q.prev.y, q.x, q.y) < 0) {\n        t = this._addTriangle(q.prev.i, i, q.i, -1, q.t, q.prev.t);\n\n        this._legalize(t + 2);\n\n        q.prev.t = t;\n        this.hull = removeNode(q);\n        q = q.prev;\n      }\n    } // save the two new edges in the hash table\n\n\n    this._hashEdge(e);\n\n    this._hashEdge(e.prev);\n  } // trim typed triangle mesh arrays\n\n\n  this.triangles = triangles.subarray(0, this.trianglesLen);\n  this.halfedges = halfedges.subarray(0, this.trianglesLen);\n}\n\nDelaunator.prototype = {\n  _hashEdge: function _hashEdge(e) {\n    this._hash[this._hashKey(e.x, e.y)] = e;\n  },\n  _hashKey: function _hashKey(x, y) {\n    var dx = x - this._cx;\n    var dy = y - this._cy; // use pseudo-angle: a measure that monotonically increases\n    // with real angle, but doesn't require expensive trigonometry\n\n    var p = 1 - dx / (Math.abs(dx) + Math.abs(dy));\n    return Math.floor((2 + (dy < 0 ? -p : p)) / 4 * this._hashSize);\n  },\n  _legalize: function _legalize(a) {\n    var triangles = this.triangles;\n    var coords = this.coords;\n    var halfedges = this.halfedges;\n    var b = halfedges[a];\n    var a0 = a - a % 3;\n    var b0 = b - b % 3;\n    var al = a0 + (a + 1) % 3;\n    var ar = a0 + (a + 2) % 3;\n    var bl = b0 + (b + 2) % 3;\n    var p0 = triangles[ar];\n    var pr = triangles[a];\n    var pl = triangles[al];\n    var p1 = triangles[bl];\n    var illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);\n\n    if (illegal) {\n      triangles[a] = p1;\n      triangles[b] = p0;\n\n      this._link(a, halfedges[bl]);\n\n      this._link(b, halfedges[ar]);\n\n      this._link(ar, bl);\n\n      var br = b0 + (b + 1) % 3;\n\n      this._legalize(a);\n\n      return this._legalize(br);\n    }\n\n    return ar;\n  },\n  _link: function _link(a, b) {\n    this.halfedges[a] = b;\n    if (b !== -1) this.halfedges[b] = a;\n  },\n  // add a new triangle given vertex indices and adjacent half-edge ids\n  _addTriangle: function _addTriangle(i0, i1, i2, a, b, c) {\n    var t = this.trianglesLen;\n    this.triangles[t] = i0;\n    this.triangles[t + 1] = i1;\n    this.triangles[t + 2] = i2;\n\n    this._link(t, a);\n\n    this._link(t + 1, b);\n\n    this._link(t + 2, c);\n\n    this.trianglesLen += 3;\n    return t;\n  }\n};\n\nfunction dist(ax, ay, bx, by) {\n  var dx = ax - bx;\n  var dy = ay - by;\n  return dx * dx + dy * dy;\n}\n\nfunction area(px, py, qx, qy, rx, ry) {\n  return (qy - py) * (rx - qx) - (qx - px) * (ry - qy);\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n  ax -= px;\n  ay -= py;\n  bx -= px;\n  by -= py;\n  cx -= px;\n  cy -= py;\n  var ap = ax * ax + ay * ay;\n  var bp = bx * bx + by * by;\n  var cp = cx * cx + cy * cy;\n  return ax * (by * cp - bp * cy) - ay * (bx * cp - bp * cx) + ap * (bx * cy - by * cx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n  bx -= ax;\n  by -= ay;\n  cx -= ax;\n  cy -= ay;\n  var bl = bx * bx + by * by;\n  var cl = cx * cx + cy * cy;\n  if (bl === 0 || cl === 0) return Infinity;\n  var d = bx * cy - by * cx;\n  if (d === 0) return Infinity;\n  var x = (cy * bl - by * cl) * 0.5 / d;\n  var y = (bx * cl - cx * bl) * 0.5 / d;\n  return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n  bx -= ax;\n  by -= ay;\n  cx -= ax;\n  cy -= ay;\n  var bl = bx * bx + by * by;\n  var cl = cx * cx + cy * cy;\n  var d = bx * cy - by * cx;\n  var x = (cy * bl - by * cl) * 0.5 / d;\n  var y = (bx * cl - cx * bl) * 0.5 / d;\n  return {\n    x: ax + x,\n    y: ay + y\n  };\n} // create a new node in a doubly linked list\n\n\nfunction insertNode(coords, i, prev) {\n  var node = {\n    i: i,\n    x: coords[2 * i],\n    y: coords[2 * i + 1],\n    t: 0,\n    prev: null,\n    next: null,\n    removed: false\n  };\n\n  if (!prev) {\n    node.prev = node;\n    node.next = node;\n  } else {\n    node.next = prev.next;\n    node.prev = prev;\n    prev.next.prev = node;\n    prev.next = node;\n  }\n\n  return node;\n}\n\nfunction removeNode(node) {\n  node.prev.next = node.next;\n  node.next.prev = node.prev;\n  node.removed = true;\n  return node.prev;\n}\n\nfunction quicksort(ids, coords, left, right, cx, cy) {\n  var i, j, temp;\n\n  if (right - left <= 20) {\n    for (i = left + 1; i <= right; i++) {\n      temp = ids[i];\n      j = i - 1;\n\n      while (j >= left && compare(coords, ids[j], temp, cx, cy) > 0) {\n        ids[j + 1] = ids[j--];\n      }\n\n      ids[j + 1] = temp;\n    }\n  } else {\n    var median = left + right >> 1;\n    i = left + 1;\n    j = right;\n    swap(ids, median, i);\n    if (compare(coords, ids[left], ids[right], cx, cy) > 0) swap(ids, left, right);\n    if (compare(coords, ids[i], ids[right], cx, cy) > 0) swap(ids, i, right);\n    if (compare(coords, ids[left], ids[i], cx, cy) > 0) swap(ids, left, i);\n    temp = ids[i];\n\n    while (true) {\n      do {\n        i++;\n      } while (compare(coords, ids[i], temp, cx, cy) < 0);\n\n      do {\n        j--;\n      } while (compare(coords, ids[j], temp, cx, cy) > 0);\n\n      if (j < i) break;\n      swap(ids, i, j);\n    }\n\n    ids[left + 1] = ids[j];\n    ids[j] = temp;\n\n    if (right - i + 1 >= j - left) {\n      quicksort(ids, coords, i, right, cx, cy);\n      quicksort(ids, coords, left, j - 1, cx, cy);\n    } else {\n      quicksort(ids, coords, left, j - 1, cx, cy);\n      quicksort(ids, coords, i, right, cx, cy);\n    }\n  }\n}\n\nfunction compare(coords, i, j, cx, cy) {\n  var d1 = dist(coords[2 * i], coords[2 * i + 1], cx, cy);\n  var d2 = dist(coords[2 * j], coords[2 * j + 1], cx, cy);\n  return d1 - d2 || coords[2 * i] - coords[2 * j] || coords[2 * i + 1] - coords[2 * j + 1];\n}\n\nfunction swap(arr, i, j) {\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n  return p[0];\n}\n\nfunction defaultGetY(p) {\n  return p[1];\n}","map":null,"metadata":{},"sourceType":"script"}