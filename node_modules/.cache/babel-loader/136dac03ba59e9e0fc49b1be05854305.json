{"ast":null,"code":"var _jsxFileName = \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\src\\\\components\\\\Home\\\\LineChartTimeline.js\";\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport * as utils from \"../Util\";\nimport moment from \"moment\";\n\nvar LineChartExpenseTimeline = function LineChartExpenseTimeline(props) {\n  var expenses = props.expenses;\n  var currentUser = props.authUser;\n  var selectedMonth = moment(new Date()).get(\"month\").toString();\n  var selectedYear = moment(new Date()).get(\"year\").toString();\n\n  if (!expenses || !currentUser || !selectedMonth || !selectedYear) {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    });\n  }\n\n  if (expenses && currentUser && selectedMonth && selectedYear) {\n    var eachExpense = utils.eachExpense(expenses);\n    var usersExpensesInSelectedMonthAndYear = utils.expensesinMonthAndYear(eachExpense, currentUser, selectedMonth, selectedYear);\n    var totals = {};\n    var dayStart = [];\n    var dayEnd = [];\n    var allDatesInSelectedMonth = utils.getAllTheDatesInAMonth(selectedYear, selectedMonth);\n    var TotalInThatDay = allDatesInSelectedMonth.map(function (date) {\n      var expensesOnThatDate = usersExpensesInSelectedMonthAndYear.filter(function (exp) {\n        return Number(exp.value.date === date);\n      });\n      totals[date] = expensesOnThatDate.map(function (elem) {\n        return Number(elem.value.expense);\n      }).length >= 1 ? expensesOnThatDate.map(function (elem) {\n        return Number(elem.value.expense);\n      }).reduce(function (prev, cur) {\n        return prev + cur;\n      }) : 0;\n    });\n    var today = moment().format(\"MM/DD/YYYY\");\n\n    for (var i = 0; i < moment(allDatesInSelectedMonth[0]).day(); i++) {\n      dayStart.push(i);\n    }\n\n    for (var _i = 0; _i < Math.abs(moment(allDatesInSelectedMonth[allDatesInSelectedMonth.length - 1]).day() - 6); _i++) {\n      dayEnd.push(_i);\n    }\n\n    var data = {\n      labels: Object.keys(totals).map(function (date) {\n        return date.substr(3, 2);\n      }),\n      datasets: [{\n        data: Object.values(totals),\n        borderColor: \"transparent\",\n        backgroundColor: \"rgb(0,0,0,0.15)\",\n        pointBackgroundColor: \"rgba(0,0,0,0)\",\n        pointBorderColor: \"rgba(0,0,0,0)\",\n        borderWidth: 4\n      }]\n    };\n    var lineArea = {\n      background: \"rgba(0,0,0,0)\",\n      position: \"absolute\",\n      top: \"20%\",\n      left: \"3%\"\n    };\n    var mobPad15 = {\n      padding: window.screen.width > 720 ? \"0\" : \"15px\"\n    };\n    var options = {\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      },\n      legend: {\n        display: false\n      },\n      tooltips: {\n        enabled: false\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-12\",\n      style: lineArea,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \" \", React.createElement(Line, {\n      data: data,\n      options: options,\n      responsive: true,\n      height: window.screen.width > 1024 ? 120 : 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })));\n  }\n};\n\nexport default LineChartExpenseTimeline;","map":{"version":3,"sources":["G:\\Workspace\\2018\\expense-manager-react\\src\\components\\Home\\LineChartTimeline.js"],"names":["React","Line","utils","moment","LineChartExpenseTimeline","props","expenses","currentUser","authUser","selectedMonth","Date","get","toString","selectedYear","eachExpense","usersExpensesInSelectedMonthAndYear","expensesinMonthAndYear","totals","dayStart","dayEnd","allDatesInSelectedMonth","getAllTheDatesInAMonth","TotalInThatDay","map","date","expensesOnThatDate","filter","exp","Number","value","elem","expense","length","reduce","prev","cur","today","format","i","day","push","Math","abs","data","labels","Object","keys","substr","datasets","values","borderColor","backgroundColor","pointBackgroundColor","pointBorderColor","borderWidth","lineArea","background","position","top","left","mobPad15","padding","window","screen","width","options","scales","xAxes","display","yAxes","legend","tooltips","enabled"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAAC,KAAK,EAAI;AACtC,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AACA,MAAIC,WAAW,GAAGF,KAAK,CAACG,QAAxB;AACA,MAAIC,aAAa,GAAGN,MAAM,CAAC,IAAIO,IAAJ,EAAD,CAAN,CACfC,GADe,CACX,OADW,EAEfC,QAFe,EAApB;AAGA,MAAIC,YAAY,GAAGV,MAAM,CAAC,IAAIO,IAAJ,EAAD,CAAN,CACdC,GADc,CACV,MADU,EAEdC,QAFc,EAAnB;;AAIA,MAAI,CAACN,QAAD,IAAa,CAACC,WAAd,IAA6B,CAACE,aAA9B,IAA+C,CAACI,YAApD,EAAkE;AAC9D,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAED,MAAIP,QAAQ,IAAIC,WAAZ,IAA2BE,aAA3B,IAA4CI,YAAhD,EAA8D;AAC1D,QAAIC,WAAW,GAAGZ,KAAK,CAACY,WAAN,CAAkBR,QAAlB,CAAlB;AACA,QAAIS,mCAAmC,GAAGb,KAAK,CAACc,sBAAN,CACtCF,WADsC,EAEtCP,WAFsC,EAGtCE,aAHsC,EAItCI,YAJsC,CAA1C;AAOA,QAAII,MAAM,GAAG,EAAb;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,MAAM,GAAG,EAAb;AAEA,QAAIC,uBAAuB,GAAGlB,KAAK,CAACmB,sBAAN,CAA6BR,YAA7B,EAA2CJ,aAA3C,CAA9B;AACA,QAAIa,cAAc,GAAGF,uBAAuB,CAACG,GAAxB,CAA4B,UAAAC,IAAI,EAAI;AACrD,UAAIC,kBAAkB,GAAGV,mCAAmC,CAACW,MAApC,CAA2C,UAAAC,GAAG;AAAA,eAAIC,MAAM,CAACD,GAAG,CAACE,KAAJ,CAAUL,IAAV,KAAmBA,IAApB,CAAV;AAAA,OAA9C,CAAzB;AACAP,MAAAA,MAAM,CAACO,IAAD,CAAN,GACIC,kBAAkB,CAACF,GAAnB,CAAuB,UAAAO,IAAI;AAAA,eAAIF,MAAM,CAACE,IAAI,CAACD,KAAL,CAAWE,OAAZ,CAAV;AAAA,OAA3B,EAA2DC,MAA3D,IAAqE,CAArE,GACMP,kBAAkB,CAACF,GAAnB,CAAuB,UAAAO,IAAI;AAAA,eAAIF,MAAM,CAACE,IAAI,CAACD,KAAL,CAAWE,OAAZ,CAAV;AAAA,OAA3B,EAA2DE,MAA3D,CAAkE,UAACC,IAAD,EAAOC,GAAP;AAAA,eAAeD,IAAI,GAAGC,GAAtB;AAAA,OAAlE,CADN,GAEM,CAHV;AAIH,KANoB,CAArB;AAQA,QAAMC,KAAK,GAAGjC,MAAM,GAAGkC,MAAT,CAAgB,YAAhB,CAAd;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnC,MAAM,CAACiB,uBAAuB,CAAC,CAAD,CAAxB,CAAN,CAAmCmB,GAAnC,EAApB,EAA8DD,CAAC,EAA/D,EAAmE;AAC/DpB,MAAAA,QAAQ,CAACsB,IAAT,CAAcF,CAAd;AACH;;AAED,SACI,IAAIA,EAAC,GAAG,CADZ,EAEIA,EAAC,GAAGG,IAAI,CAACC,GAAL,CAASvC,MAAM,CAACiB,uBAAuB,CAACA,uBAAuB,CAACY,MAAxB,GAAiC,CAAlC,CAAxB,CAAN,CAAoEO,GAApE,KAA4E,CAArF,CAFR,EAGID,EAAC,EAHL,EAIE;AACEnB,MAAAA,MAAM,CAACqB,IAAP,CAAYF,EAAZ;AACH;;AAGD,QAAMK,IAAI,GAAG;AACTC,MAAAA,MAAM,EAAEC,MAAM,CAACC,IAAP,CAAY7B,MAAZ,EAAoBM,GAApB,CAAwB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACuB,MAAL,CAAY,CAAZ,EAAe,CAAf,CAAJ;AAAA,OAA5B,CADC;AAETC,MAAAA,QAAQ,EAAE,CACN;AACIL,QAAAA,IAAI,EAAEE,MAAM,CAACI,MAAP,CAAchC,MAAd,CADV;AAEIiC,QAAAA,WAAW,EAAE,aAFjB;AAGIC,QAAAA,eAAe,EAAE,iBAHrB;AAIIC,QAAAA,oBAAoB,EAAE,eAJ1B;AAKIC,QAAAA,gBAAgB,EAAE,eALtB;AAMIC,QAAAA,WAAW,EAAE;AANjB,OADM;AAFD,KAAb;AAcA,QAAMC,QAAQ,GAAG;AAAEC,MAAAA,UAAU,EAAE,eAAd;AAA+BC,MAAAA,QAAQ,EAAE,UAAzC;AAAqDC,MAAAA,GAAG,EAAE,KAA1D;AAAiEC,MAAAA,IAAI,EAAE;AAAvE,KAAjB;AACA,QAAMC,QAAQ,GAAG;AAAEC,MAAAA,OAAO,EAAEC,MAAM,CAACC,MAAP,CAAcC,KAAd,GAAsB,GAAtB,GAA4B,GAA5B,GAAkC;AAA7C,KAAjB;AAEA,QAAMC,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE;AACJC,QAAAA,KAAK,EAAE,CACH;AACIC,UAAAA,OAAO,EAAE;AADb,SADG,CADH;AAMJC,QAAAA,KAAK,EAAE,CACH;AACID,UAAAA,OAAO,EAAE;AADb,SADG;AANH,OADI;AAaZE,MAAAA,MAAM,EAAE;AACJF,QAAAA,OAAO,EAAE;AADL,OAbI;AAgBZG,MAAAA,QAAQ,EAAE;AACNC,QAAAA,OAAO,EAAE;AADH;AAhBE,KAAhB;AAqBA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,KAAK,EAAEjB,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,GADL,EAEI,oBAAC,IAAD;AACI,MAAA,IAAI,EAAEZ,IADV;AAEI,MAAA,OAAO,EAAEsB,OAFb;AAGI,MAAA,UAAU,EAAE,IAHhB;AAII,MAAA,MAAM,EAAEH,MAAM,CAACC,MAAP,CAAcC,KAAd,GAAsB,IAAtB,GAA6B,GAA7B,GAAmC,CAJ/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,CADJ;AAaH;AACJ,CAvGD;;AAyGA,eAAe5D,wBAAf","sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport * as utils from \"../Util\";\r\nimport moment from \"moment\";\r\n\r\nconst LineChartExpenseTimeline = props => {\r\n    let expenses = props.expenses;\r\n    let currentUser = props.authUser;\r\n    let selectedMonth = moment(new Date())\r\n        .get(\"month\")\r\n        .toString();\r\n    let selectedYear = moment(new Date())\r\n        .get(\"year\")\r\n        .toString();\r\n\r\n    if (!expenses || !currentUser || !selectedMonth || !selectedYear) {\r\n        return <span />;\r\n    }\r\n\r\n    if (expenses && currentUser && selectedMonth && selectedYear) {\r\n        let eachExpense = utils.eachExpense(expenses);\r\n        let usersExpensesInSelectedMonthAndYear = utils.expensesinMonthAndYear(\r\n            eachExpense,\r\n            currentUser,\r\n            selectedMonth,\r\n            selectedYear\r\n        );\r\n\r\n        let totals = {};\r\n        let dayStart = [];\r\n        let dayEnd = [];\r\n\r\n        let allDatesInSelectedMonth = utils.getAllTheDatesInAMonth(selectedYear, selectedMonth);\r\n        let TotalInThatDay = allDatesInSelectedMonth.map(date => {\r\n            var expensesOnThatDate = usersExpensesInSelectedMonthAndYear.filter(exp => Number(exp.value.date === date));\r\n            totals[date] =\r\n                expensesOnThatDate.map(elem => Number(elem.value.expense)).length >= 1\r\n                    ? expensesOnThatDate.map(elem => Number(elem.value.expense)).reduce((prev, cur) => prev + cur)\r\n                    : 0;\r\n        });\r\n\r\n        const today = moment().format(\"MM/DD/YYYY\");\r\n\r\n        for (let i = 0; i < moment(allDatesInSelectedMonth[0]).day(); i++) {\r\n            dayStart.push(i);\r\n        }\r\n\r\n        for (\r\n            let i = 0;\r\n            i < Math.abs(moment(allDatesInSelectedMonth[allDatesInSelectedMonth.length - 1]).day() - 6);\r\n            i++\r\n        ) {\r\n            dayEnd.push(i);\r\n        }\r\n\r\n\r\n        const data = {\r\n            labels: Object.keys(totals).map(date => date.substr(3, 2)),\r\n            datasets: [\r\n                {\r\n                    data: Object.values(totals),\r\n                    borderColor: \"transparent\",\r\n                    backgroundColor: \"rgb(0,0,0,0.15)\",\r\n                    pointBackgroundColor: \"rgba(0,0,0,0)\",\r\n                    pointBorderColor: \"rgba(0,0,0,0)\",\r\n                    borderWidth: 4\r\n                }\r\n            ]\r\n        };\r\n\r\n        const lineArea = { background: \"rgba(0,0,0,0)\", position: \"absolute\", top: \"20%\", left: \"3%\" };\r\n        const mobPad15 = { padding: window.screen.width > 720 ? \"0\" : \"15px\" };\r\n\r\n        const options = {\r\n            scales: {\r\n                xAxes: [\r\n                    {\r\n                        display: false\r\n                    }\r\n                ],\r\n                yAxes: [\r\n                    {\r\n                        display: false\r\n                    }\r\n                ]\r\n            },\r\n            legend: {\r\n                display: false\r\n            },\r\n            tooltips: {\r\n                enabled: false\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"col-sm-12\" style={lineArea}>\r\n                    {\" \"}\r\n                    <Line\r\n                        data={data}\r\n                        options={options}\r\n                        responsive={true}\r\n                        height={window.screen.width > 1024 ? 120 : 0}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default LineChartExpenseTimeline;\r\n"]},"metadata":{},"sourceType":"module"}