{"ast":null,"code":"/*\n * Pattern.js\n * Contains rendering implementations for trianglify-generated geometry\n */\n// conditionally load jsdom if we don't have a browser environment available.\nvar doc = typeof document !== \"undefined\" ? document : require('jsdom').jsdom('<html/>');\n\nfunction Pattern(polys, opts) {\n  // SVG rendering method\n  function render_svg(svgOpts) {\n    var svg = doc.createElementNS(\"http://www.w3.org/2000/svg\", 'svg');\n    svg.setAttribute('width', opts.width);\n    svg.setAttribute('height', opts.height);\n\n    if (svgOpts && svgOpts.includeNamespace) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n\n    polys.forEach(function (poly) {\n      var path = doc.createElementNS(\"http://www.w3.org/2000/svg\", 'path');\n      path.setAttribute(\"d\", \"M\" + poly[1].join(\"L\") + \"Z\");\n      path.setAttribute(\"fill\", poly[0]);\n      path.setAttribute(\"stroke\", poly[0]);\n      path.setAttribute(\"stroke-width\", opts.stroke_width);\n      svg.appendChild(path);\n    });\n    return svg;\n  } // Canvas rendering method\n\n\n  function render_canvas(canvas) {\n    // check for canvas support\n    var ctx;\n\n    if (typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node !== 'undefined') {\n      // In Node environment.\n      try {\n        require('canvas');\n      } catch (e) {\n        throw Error('The optional node-canvas dependency is needed for Trianglify to render using canvas in node.');\n      }\n    }\n\n    if (!canvas) {\n      canvas = doc.createElement('canvas');\n    }\n\n    canvas.setAttribute('width', opts.width);\n    canvas.setAttribute('height', opts.height);\n    ctx = canvas.getContext(\"2d\");\n    ctx.canvas.width = opts.width;\n    ctx.canvas.height = opts.height;\n    polys.forEach(function (poly) {\n      ctx.fillStyle = ctx.strokeStyle = poly[0];\n      ctx.lineWidth = opts.stroke_width;\n      ctx.beginPath();\n      ctx.moveTo.apply(ctx, poly[1][0]);\n      ctx.lineTo.apply(ctx, poly[1][1]);\n      ctx.lineTo.apply(ctx, poly[1][2]);\n      ctx.fill();\n      ctx.stroke();\n    });\n    return canvas;\n  } // PNG rendering method\n  // currently returns a data url as a string since toBlob support really isn't there yet...\n\n\n  function render_png() {\n    return render_canvas().toDataURL(\"image/png\");\n  } // Return an object with all the relevant functions/properties attached to it\n\n\n  return {\n    polys: polys,\n    opts: opts,\n    svg: render_svg,\n    canvas: render_canvas,\n    png: render_png\n  };\n}\n\nmodule.exports = Pattern;","map":null,"metadata":{},"sourceType":"script"}