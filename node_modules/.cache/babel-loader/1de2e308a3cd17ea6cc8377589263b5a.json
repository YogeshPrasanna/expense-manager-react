{"ast":null,"code":"import _classCallCheck from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"G:\\\\Workspace\\\\2018\\\\expense-manager-react\\\\src\\\\components\\\\Loan\\\\ExportToExcel.js\";\nimport React, { Component } from \"react\";\n\nvar ExportToExcel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ExportToExcel, _Component);\n\n  function ExportToExcel(props) {\n    var _this;\n\n    _classCallCheck(this, ExportToExcel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ExportToExcel).call(this, props));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ExportToExcel, [{\n    key: \"print\",\n    value: function print() {\n      window.print();\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      var expenseData = this.props.excelDataObject;\n      var CSVData = expenseData.map(function (expense) {\n        return {\n          Date: expense.date,\n          Type: expense.loanType === \"Given\" ? \"Given To\" : \"Taken From\",\n          Person: expense.person,\n          Amount: expense.amount,\n          Reason: expense.reason,\n          Status: expense.status\n        };\n      });\n\n      var JSONToCSVConvertor = function JSONToCSVConvertor(JSONData, ReportTitle, ShowLabel) {\n        //If JSONData is not an object then JSON.parse will parse the JSON string in an Object\n        var arrData = typeof JSONData !== \"object\" ? JSON.parse(JSONData) : JSONData;\n        var CSV = \"\"; //Set Report title in first row or line\n\n        CSV += ReportTitle + \"\\r\\n\\n\"; //This condition will generate the Label/Header\n\n        if (ShowLabel) {\n          var row = \"\"; //This loop will extract the label from 1st index of on array\n\n          for (var index in arrData[0]) {\n            //Now convert each value to string and comma-seprated\n            row += index + \",\";\n          }\n\n          row = row.slice(0, -1); //append Label row with line break\n\n          CSV += row + \"\\r\\n\";\n        } //1st loop is to extract each row\n\n\n        for (var i = 0; i < arrData.length; i++) {\n          var _row = \"\"; //2nd loop will extract each column and convert it in string comma-seprated\n\n          for (var _index in arrData[i]) {\n            _row += '\"' + arrData[i][_index] + '\",';\n          }\n\n          _row.slice(0, _row.length - 1); //add a line break after each row\n\n\n          CSV += _row + \"\\r\\n\";\n        }\n\n        if (CSV === \"\") {\n          alert(\"Invalid data\");\n          return;\n        } //Generate a file name\n\n\n        var fileName = \"MyReport_\"; //this will remove the blank-spaces from the title and replace it with an underscore\n\n        fileName += ReportTitle.replace(/ /g, \"_\"); //Initialize file format you want csv or xls\n\n        var uri = \"data:text/csv;charset=utf-8,\" + escape(CSV); // Now the little tricky part.\n        // you can use either>> window.open(uri);\n        // but this will not work in some browsers\n        // or you will not get the correct file extension\n        //this trick will generate a temp <a /> tag\n\n        var link = document.createElement(\"a\");\n        link.href = uri; //set the visibility hidden so it will not effect on your web-layout\n\n        link.style = \"visibility:hidden\";\n        link.download = fileName + \".csv\"; //this part will append the anchor tag and remove it after automatic click\n\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      };\n\n      return JSONToCSVConvertor(CSVData, this.props.pageTitle, true);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var clickIcon = {\n        cursor: \"pointer\"\n      };\n      var clickIconPrint = {\n        cursor: \"pointer\",\n        marginLeft: \"25px\"\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        onClick: this.handleClick,\n        style: clickIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-file-excel-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), \" Export as excel\"), React.createElement(\"span\", {\n        onClick: this.print,\n        style: clickIconPrint,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-print\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), \" Print\"), React.createElement(\"span\", {\n        className: \"totalRecords\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, this.props.excelDataObject.length, \" records\"));\n    }\n  }]);\n\n  return ExportToExcel;\n}(Component);\n\nexport default ExportToExcel;","map":{"version":3,"sources":["G:\\Workspace\\2018\\expense-manager-react\\src\\components\\Loan\\ExportToExcel.js"],"names":["React","Component","ExportToExcel","props","handleClick","bind","window","print","event","expenseData","excelDataObject","CSVData","map","expense","Date","date","Type","loanType","Person","person","Amount","amount","Reason","reason","Status","status","JSONToCSVConvertor","JSONData","ReportTitle","ShowLabel","arrData","JSON","parse","CSV","row","index","slice","i","length","alert","fileName","replace","uri","escape","link","document","createElement","href","style","download","body","appendChild","click","removeChild","pageTitle","clickIcon","cursor","clickIconPrint","marginLeft"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass ExportToExcel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    print() {\r\n        window.print();\r\n    }\r\n\r\n    handleClick(event) {\r\n        const expenseData = this.props.excelDataObject;\r\n        const CSVData = expenseData.map(expense => {\r\n            return {\r\n                Date: expense.date,\r\n                Type: expense.loanType === \"Given\" ? \"Given To\" : \"Taken From\",\r\n                Person: expense.person,\r\n                Amount: expense.amount,\r\n                Reason: expense.reason,\r\n                Status: expense.status\r\n            };\r\n        });\r\n\r\n        const JSONToCSVConvertor = (JSONData, ReportTitle, ShowLabel) => {\r\n            //If JSONData is not an object then JSON.parse will parse the JSON string in an Object\r\n            const arrData = typeof JSONData !== \"object\" ? JSON.parse(JSONData) : JSONData;\r\n\r\n            let CSV = \"\";\r\n            //Set Report title in first row or line\r\n\r\n            CSV += ReportTitle + \"\\r\\n\\n\";\r\n\r\n            //This condition will generate the Label/Header\r\n            if (ShowLabel) {\r\n                let row = \"\";\r\n\r\n                //This loop will extract the label from 1st index of on array\r\n                for (let index in arrData[0]) {\r\n                    //Now convert each value to string and comma-seprated\r\n                    row += index + \",\";\r\n                }\r\n\r\n                row = row.slice(0, -1);\r\n\r\n                //append Label row with line break\r\n                CSV += row + \"\\r\\n\";\r\n            }\r\n\r\n            //1st loop is to extract each row\r\n            for (var i = 0; i < arrData.length; i++) {\r\n                let row = \"\";\r\n\r\n                //2nd loop will extract each column and convert it in string comma-seprated\r\n                for (let index in arrData[i]) {\r\n                    row += '\"' + arrData[i][index] + '\",';\r\n                }\r\n\r\n                row.slice(0, row.length - 1);\r\n\r\n                //add a line break after each row\r\n                CSV += row + \"\\r\\n\";\r\n            }\r\n\r\n            if (CSV === \"\") {\r\n                alert(\"Invalid data\");\r\n                return;\r\n            }\r\n\r\n            //Generate a file name\r\n            let fileName = \"MyReport_\";\r\n            //this will remove the blank-spaces from the title and replace it with an underscore\r\n            fileName += ReportTitle.replace(/ /g, \"_\");\r\n\r\n            //Initialize file format you want csv or xls\r\n            var uri = \"data:text/csv;charset=utf-8,\" + escape(CSV);\r\n\r\n            // Now the little tricky part.\r\n            // you can use either>> window.open(uri);\r\n            // but this will not work in some browsers\r\n            // or you will not get the correct file extension\r\n\r\n            //this trick will generate a temp <a /> tag\r\n            let link = document.createElement(\"a\");\r\n            link.href = uri;\r\n\r\n            //set the visibility hidden so it will not effect on your web-layout\r\n            link.style = \"visibility:hidden\";\r\n            link.download = fileName + \".csv\";\r\n\r\n            //this part will append the anchor tag and remove it after automatic click\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n        };\r\n\r\n        return JSONToCSVConvertor(CSVData, this.props.pageTitle, true);\r\n    }\r\n\r\n    render() {\r\n        const clickIcon = {\r\n            cursor: \"pointer\"\r\n        };\r\n\r\n        const clickIconPrint = {\r\n            cursor: \"pointer\",\r\n            marginLeft: \"25px\"\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <span onClick={this.handleClick} style={clickIcon}>\r\n                    <i className=\"fa fa-file-excel-o\" /> Export as excel\r\n                </span>\r\n\r\n                <span onClick={this.print} style={clickIconPrint}>\r\n                    <i className=\"fa fa-print\" /> Print\r\n                </span>\r\n\r\n                <span className=\"totalRecords\">{this.props.excelDataObject.length} records</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExportToExcel;\r\n"]},"metadata":{},"sourceType":"module"}